[{"title":"Hello World","url":"/2023/01/30/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Build Your Remote Linux Docker","url":"/2023/01/30/Build-Your-Remote-Linux-Docker/","content":"Author ：探姬\n原文于语雀发布，地址为：https://www.yuque.com/probius/cs_wp/fegz0w\n本文也有配套视频，建议结合食用：(给个三连吧www)\nhttps://www.bilibili.com/video/BV1684y1z7L6\nAbout本文档完整的流程可以帮助您在Kali Linux上完成Docker环境，并且基于Vscode的Remote功能，利用SSH协议，构建 VSCODE + SSH + Docker 的工作流，提高效率。\n同样，本文档也考虑了非Kali，用于开发&#x2F;生产环境的 Ubuntu &#x2F; Debian 系统 ，如果您想要在开发&#x2F;生产中使用该工作流，可以直接从Get Docker 或者 Build SSH＋vscode + docker Workflow 章节开始。\n笔者水平有限，错误疏漏之处在所难免，烦请各位师傅斧正。\n以及非常感谢 陈橘墨(@Randark_JMT)师傅提供的帮助。\nGet KaliDownload在Kali官网下载即可，建议直接下载封装好的虚拟机版本：\nhttps://www.kali.org/get-kali/#kali-virtual-machines\n\n解压下载好的压缩包到您想要放置虚拟机的位置，然后双击配置文件直接打开自动添加，或者在VMware中手动添加：\n\n添加完成后，启动即可：\n\n（当然，作为DockerRuner，您可能需要设置一个稍微大点的内存值）\n\nChangeResource？笔者并不建议换源，Kali官方源的速度还是不错的，换源可能会导致您软件管理出现问题。\nGet DockerInstalldocker安装目前有两个版本，一个是官方的docker.ce版本，一个是有Debian团队维护的docker.io版本。\n之前有争议说 docker.io 是旧版本的docker 而新版的docker是 dockers.ce\n然而docker.io的版本有时会比docker.ce高，事实上，两者只是负责维护的组织不同，前者是Debian官方维护，后者则为Docker官方维护，并没后新旧之分：\nhttps://stackoverflow.com/questions/45023363/what-is-docker-io-in-relation-to-docker-ce-and-docker-ee-now-called-mirantis-k\ndocker.io该版本由Debian团队维护，采用 apt 的方式管理依赖\n安装过程：\nsudo apt-get update\n\n\nsudo apt install docker.io\n\n\n\ndocker.ce 由docker官方维护的版本，采用 go 的方式管理依赖，如果您要在开发&#x2F;生产环境中使用docker，推荐使用该版本。\n如果您的Linux版本为Ubuntu&#x2F;Debian，可以使用一下命令自动安装：\nwget -qO- https://get.docker.com/ | sh\n\n（注意，Docker并不支持Kali一键安装，同样笔者也不推荐您用kali作为开发生产环境，Kali满足日常需要，使用io版本即可，当然您也可以使用.ce版本的手动安装）\n手动安装：\n可以参考Docker官方的 Docker Engine安装步骤：\nhttps://docs.docker.com/engine/install/debian/\n但是该步骤在 Kali Linux上面可能会存在一定问题，以Kali为例，完整的按照流程如下：\nsudo apt-get updatesudo apt-get install \\    ca-certificates \\    curl \\    gnupg \\    lsb-release\n\n\n选项选择Yes就好。\n然后按照官网提示，添加Docker官方的 GPG key：\nsudo mkdir -p /etc/apt/keyringscurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n然后设置仓库：\necho \\  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n然后开始安装：\nsudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n随后，如果您是Kali Linux，您可能会遭遇以下报错：\nhttps://unix.stackexchange.com/questions/630643/how-to-install-docker-ce-in-kali-linux\n\n\n这是由于Docker官方并没有提供直接支持Kali的源，所以我们使用Debian的源就好：\nprintf &quot;%s\\n&quot; &quot;deb [arch=amd64] https://download.docker.com/linux/debian buster stable&quot; |\\sudo tee /etc/apt/sources.list.d/docker-ce.list\n\n并且添加对应的密钥：\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\n\n注意不要忘了给密钥相应权限：\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n此时再跑一次 sudo apt-get update:\nsudo apt-get update\n\n您可能会遇到一个找不到的源，这个是正常的。\n\n接下来安装docker：\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n就能正常获取了：\n\n安装完成后，执行hello-world，得到图示则安装成功。\nsudo docker run hello-world\n\n\nDockerHubhttps://hub.docker.com/\n尝试登录您的**DockerHub**账号：\n\n如果出现类似错误，请手动配置DNS：\nsudo vim /etc/resolv.conf\n\n\n保存，再次尝试即可成功登录：\n\nBuild SSH＋vscode + docker Workflow该步骤适用于支持SSH协议的Linux（废话，哪个Linux没有个SSH），除了在本地的Kali或者其他Linux上面构建，也支持远程构建该工作流。\nStart SSH ServiceKali LinuxKali虚拟机默认是没有开启ssh服务的 （ssh状态：/etc/init.d/ssh status）\n\n所以需要手动启动一下：\nsudo /etc/init.d/ssh start \n\n当然，为了方便，我们将ssh添加到开机自启中：\nsudo update-rc.d ssh enable# Or use:systemctl enable ssh.service\n\n\n启动之后就可以开始后面的步骤了。\nUbuntu由于ubuntu默认不自带openssh-server，所以这里需要手动安装。\n安装openssh-server：\nsudo apt-get install openssh-server\n\n安装完成后启动服务：\nsudo service ssh start\n\nGet Remote - SSH为了使用vscode的远程ssh功能 您可能需要在扩展中安装 Remote - SSH插件：\n\nLet Vscode Connect to host连接方式有两种：密码连接 和 ssh的公私钥。\n一般情况下我们使用密码连接，这样的方法安全性较低，而且每次连接和每次切换目录的时候都会要求输入密码，所以在确保能够密码连接情况下，我们可以进一步使用公私钥验证的方式来提升安全性和优化操作友好性。\nUsing password connection打开vscode，点击左下角的远程连接（绿色的部分）\n\n接着在弹出的窗口中选择 Connect to Host\n\n选择 Add New SSH Host：\n\n按照要求输入对应的指令：\n\nIP可通过 ip a 获取\n\nssh kali@192.168.28.145 -A\n\n保存位置默认第一个就好：\n\n然后连接：\n\n选择对应的系统：\n\n选择继续：\n\n输入密码：\n\n初始化完成后就连接上了：\n\nUsing public and private keysCreate public and private keys首先在本机上生成对应的公钥私钥：\nssh-keygen\n\n\nEnter file in which to save the key (C:\\Users\\Probius/.ssh/id_rsa):\n\n输入保存路径，如果为空默认为 C:\\Users\\USERNAME/.ssh/id_rsa，这里笔者直接输入了名字，让其以该名字直接保存在当前目录\nEnter passphrase (empty for no passphrase):\n\n输入私钥密码，为空则没有\nEnter same passphrase again:\n\n注意：如果您使用了私钥密码，那么在进行ssh登录的时候，会提示您输入私钥密码，相当于再使用公私钥登录的情况下又加了一层密码，安全性有很大的提升，但是这样会变得和密码登录一样每次都要输入，这里笔者建议，如果是本地一路回车就好了，如果是远程资源的管理，可以综合安全性考虑\n生成过后，得到的id_rsa.pub(Kali_test.pub)是公钥，id_rsa(Kali_test)是私钥 \n将得到的私钥放在我们的.ssh(C:\\Users\\USERNAME.ssh)中。\n(您也可以在生成的时候就让他防止在此，当然这并不是重点）\nConfiguring Remote Host将得到的公钥上传到 Kali&#x2F;服务器中对应用户的.ssh文件夹中(请确保该文件夹至少有700的权限)：\n（注意 kali默认没有该文件夹，需要用户手动创建，并且赋700权限 mkdir ~/.ssh ）\n\n在此处打开终端，用公钥文件来生成 authorized_keys：\ncat id_ras.pub &gt;&gt; authorized_keys# 此处既 cat Kali_test.pub &gt;&gt; authorized_keys\n\n\n由于Linux系统对.ssh拥有比较严格的权限限制，请确保权限配置正确：\nsudo chmod 600 authorized_keyssudo chmod 700 ~/.ssh\n\n编辑ssh配置文件\nsudo vim /etc/ssh/sshd_config\n\n确保拥有以下条目：\nRSAAuthentication yesPubkeyAuthentication yes\n\n注意Kali的ssh默认配置是没有上诉两项的，需要自行添加：\n\n然后搞定一切后 重启SSH服务：\nsudo service ssh restart\n\nLinux部分的配置这样就搞定啦~\n（在您确保您的连接无误后，如果是服务器等远程设备，可以在config中关闭密码登录以提升安全性：\nPasswordAuthentication no）\nConfiguring Local Host然后是Windows，也就是vscode这边的配置：\n添加NewHost：\n\n使用：\nssh USERNAME@IP -i C:\\\\Users\\\\Probius\\\\.ssh\\\\RAS_ID\n\n（注意使用指令添加时，务必使用双斜杠）\n当然，也可以在已经添加的配置文件上改：\nHost 192.168.28.145\tHostName 192.168.28.145\tUser kali\tIdentityFile C:\\Users\\Probius\\.ssh\\Kali_test\n\n如果操作无误，且没有设置私钥密码，那么点击连接之后无需其他额外操作即可连接；如果设置了私钥密码，那么按照提示输入即可。\nOther_About SSH key login关于ssh密钥登录的更多知识可以看这一篇文章：\nhttps://wangdoc.com/ssh/key.html\nGet The Docker ExtensionInstall extension\n（当然 如果显示的是 安装也是一样的）\n\nSolve error如果您使用自动安装，应该不会遇到该问题，自动安装的sh会自动完成用户组添加的操作。\n由于权限原因，我们可能无法访问到  /var/run/docker.sock\n\nBy add user group一劳永逸的解决权限问题，将当前用户组添加到docker组即可。\n创建docker用户组，默认安装时就会自动创建，所以执行可能会显示exist\nsudo groupadd docker \n\n添加当前用户到该组：\nsudo usermod -aG docker $&#123;USER&#125; \n\n然后重新启动容器服务：\nsudo systemctl restart docker \n\n再次重新登入即可，如果重新登录之后依旧报错无法读取，请尝试重启：\nreboot\n\nBy chmod也可以使用 sudo chmod 777 /var/run/docker.sock，但是每次重启之后权限都会重置，不推荐\n\n然后就能正常访问了：\n\nStart Use（以下操作使用DockerHub演示）\n因为在安装Docker的时候登录过DockerHub所以这里连接之后，系统会自动获取您的凭证，您可以在这查看您的DockerHub仓库：\n\n当然，您也可以添加其他仓库，具体的用法可以参考官方文档：\nhttps://code.visualstudio.com/docs/containers/quickstart-container-registries\nPull Image当然 对于自己仓库的镜像还是比较方便的233：\n\n当然如果是公开镜像的话 还是免不了指令啦，不过还是比较方便的，旁边就是终端：\n\n完成之后就能在IMAGES栏看到了：\n\nRun Docker运行容器有两个选项Run &#x2F; Run Ineractive\nRun默认后台运行，Run执行后效果和在Linux执行 -d的效果相同：\n\n\nRun Interacitve该选项运行执行后，除了运行容器，还会跳到容器的汇总shell处，这里会实时打印容器日志，\n效果和 View Log效果相同：\n\nView Log直达容器后台日志，如果在运行的时候选择Run Interacitve那么也会跳转到该log页面。\n\n\nAttach Shell右键选中之后可以直接建立一个容器内部的shell，省去docker exec -i -t  ID /bin/bash\n\n\nEdit Container在CONTAINERS中下拉一个容器的file可以对其进行查看和编辑：\n\n可以看到对于容器来说 修改是即时的（支持热更新的）\n\nAttach Container（Advanced Edit？）我们也可以用Vscode建立类似SSH的连接，直接连接到整个容器：\n\n并且操作同步：\n\n而且容器支持文件拖拽，相比单纯的COPY指令 拥有更好的体验（个人感觉\nPort Forward通过SSH直接将远程端口转发到本地，免除防火墙困扰ww\n\n一般来讲在您启动容器的时候 vscode会自动配置 当然为了更好的区分和避免冲突 也可以手动分配\n配置如图：\n\nOpen in Borrow如果您配置完成了端口转发(或者vscode自动为您完成配置）那么点击Open in Borrow将在您的默认浏览器中快速打开该端口对应的页面：\n\n\nOther其他用法，就请佬们自行探索啦ww\nExtensionRecommendThunder ClientThunder Client is a lightweight Rest API Client Extension for Visual Studio Code, hand-crafted by Ranga Vadhineni with simple and clean design.\n要注意的是 该插件基于远程运行（既本体在虚拟机&#x2F;服务器上），在测试的时候请确保url指向正确。\n\n","tags":["Develop CTF"]}]